[{"path":"https://niehs.github.io/beethoven/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 NRTAPmodel authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://niehs.github.io/beethoven/articles/epa_download.html","id":"downloading-and-pre-processing-pre-generated-epa-aqs-data-from-their-website","dir":"Articles","previous_headings":"","what":"Downloading and pre-processing pre-generated EPA AQS data from their website","title":"Downloading EPA Daily Data","text":"script downloads pre-processed data EPA’s AQS data desired variable, year(s), temporal resolution. script also joins multiple years’ data single data frame, downloads file metadata monitors included dataset. first version script (August 2023) written download daily PM2.5 data period 2018-2022. Available datasets can found website https://aqs.epa.gov/aqsweb/airdata/download_files.html.","code":""},{"path":"https://niehs.github.io/beethoven/articles/epa_download.html","id":"setting-up-for-data-download","dir":"Articles","previous_headings":"Downloading and pre-processing pre-generated EPA AQS data from their website","what":"1. Setting up for data download","title":"Downloading EPA Daily Data","text":"Specifying temporal resolution, parameter interest, year Create list file URLs Specify download folder desired name downloaded zip files","code":"resolution <- \"daily\" parameter_code <- 88101 # Parameter Code for PM2.5 local conditions startyear <- 2018 endyear <- 2022 file_urls <- sprintf(   paste(\"https://aqs.epa.gov/aqsweb/airdata/\", resolution,     \"_\", parameter_code, \"_%.0f.zip\",     sep = \"\"   ),   startyear:endyear ) file_urls ## [1] \"https://aqs.epa.gov/aqsweb/airdata/daily_88101_2018.zip\" ## [2] \"https://aqs.epa.gov/aqsweb/airdata/daily_88101_2019.zip\" ## [3] \"https://aqs.epa.gov/aqsweb/airdata/daily_88101_2020.zip\" ## [4] \"https://aqs.epa.gov/aqsweb/airdata/daily_88101_2021.zip\" ## [5] \"https://aqs.epa.gov/aqsweb/airdata/daily_88101_2022.zip\" download_dir <- \"../input/aqs/\" download_names <- sprintf(   paste(download_dir,     \"download_output_%.0f.zip\",     sep = \"\"   ),   startyear:endyear ) download_names ## [1] \"../input/aqs/download_output_2018.zip\" ## [2] \"../input/aqs/download_output_2019.zip\" ## [3] \"../input/aqs/download_output_2020.zip\" ## [4] \"../input/aqs/download_output_2021.zip\" ## [5] \"../input/aqs/download_output_2022.zip\""},{"path":"https://niehs.github.io/beethoven/articles/epa_download.html","id":"downloading-data","dir":"Articles","previous_headings":"Downloading and pre-processing pre-generated EPA AQS data from their website","what":"2. Downloading data","title":"Downloading EPA Daily Data","text":"Download zip files website Construct string unzipped file names","code":"download.file(file_urls, download_names, method = \"libcurl\") csv_names <- sprintf(   paste(download_dir, resolution, \"_\",     parameter_code, \"_%.0f.csv\",     sep = \"\"   ),   startyear:endyear )"},{"path":"https://niehs.github.io/beethoven/articles/epa_download.html","id":"processing-data","dir":"Articles","previous_headings":"Downloading and pre-processing pre-generated EPA AQS data from their website","what":"3. Processing data","title":"Downloading EPA Daily Data","text":"Unzip read .csv files, process join one dataframe. unique site identifier “ID.Code” string structure State-County-Site-Parameter-POC","code":"for (n in seq_along(file_urls)) {   # Unzips file to same folder it was downloaded to   unzip(download_names[n], exdir = download_dir)    # Read in dataframe   print(paste(\"reading and processing file:\", csv_names[n], \"...\"))   data <- read.csv(csv_names[n], stringsAsFactors = FALSE)    # Make unique site identifier: State-County-Site-Parameter-POC   data$ID.Code <- paste(data$State.Code, data$County.Code,     data$Site.Num, data$Parameter.Code,     data$POC,     sep = \"-\"   )    # Concatenate with other years   if (n == 1) {     data_all <- data   } else {     data_all <- rbind(data_all, data)   } } ## [1] \"reading and processing file:../input/aqs/daily_88101_2018.csv...\" ## [1] \"reading and processing file:../input/aqs/daily_88101_2019.csv...\" ## [1] \"reading and processing file:../input/aqs/daily_88101_2020.csv...\" ## [1] \"reading and processing file:../input/aqs/daily_88101_2021.csv...\" ## [1] \"reading and processing file:../input/aqs/daily_88101_2022.csv...\""},{"path":"https://niehs.github.io/beethoven/articles/epa_download.html","id":"downloading-monitor-metadata-file-and-filter-for-relevant-sites","dir":"Articles","previous_headings":"Downloading and pre-processing pre-generated EPA AQS data from their website","what":"4. Downloading monitor metadata file and filter for relevant sites","title":"Downloading EPA Daily Data","text":"Download monitors file Unzip read Create site identifier Filter monitors file include monitors csv","code":"destfile <- paste(download_dir, \"aqs_monitors.zip\", sep = \"\") download.file(\"https://aqs.epa.gov/aqsweb/airdata/aqs_monitors.zip\", destfile) unzip(destfile, exdir = download_dir) monitors <- read.csv(\"../input/aqs/aqs_monitors.csv\", stringsAsFactors = FALSE) # Convert from string to numeric to get rid of leading zeros, # the NAs introduced are from monitors in Canada with site number=\"CC\" monitors$State.Code <- as.numeric(monitors$State.Code) monitors$ID.Code <- paste(monitors$State.Code, monitors$County.Code,   monitors$Site.Num, monitors$Parameter.Code,   monitors$POC,   sep = \"-\" ) monitors <- read.csv(\"../input/aqs/aqs_monitors.csv\",   stringsAsFactors = FALSE ) monitors_filter <- monitors[which(monitors$ID.Code %in% data_all$ID.Code), ]"},{"path":"https://niehs.github.io/beethoven/articles/epa_download.html","id":"uploading-data-to-desired-folder","dir":"Articles","previous_headings":"Downloading and pre-processing pre-generated EPA AQS data from their website","what":"5. Uploading data to desired folder","title":"Downloading EPA Daily Data","text":"","code":"savepath <- \"../input/aqs/\"  write.csv(data_all, paste(savepath, resolution, \"_\", parameter_code, \"_\",   startyear, \"-\", endyear, \".csv\",   sep = \"\" )) write.csv(monitors_filter, paste(savepath, \"monitors_\", parameter_code, \"_\",   startyear, \"-\", endyear, \".csv\",   sep = \"\" ))"},{"path":"https://niehs.github.io/beethoven/articles/prediction_points.html","id":"objective","dir":"Articles","previous_headings":"","what":"Objective","title":"Generate prediction points","text":"vignette demonstrate prediction grid points 1-km resolution generated polygon data mainland US terra package.","code":""},{"path":"https://niehs.github.io/beethoven/articles/prediction_points.html","id":"strategy","dir":"Articles","previous_headings":"","what":"Strategy","title":"Generate prediction points","text":"set upper left lower right corners make regular grid points 1,000 meter interval. EPSG:5070, Conus Albers equal area projection, used throughout vignette.","code":"usmain <- terra::vect(\"../tests/testdata/US-mainland-boundary.gpkg\") usmain <- terra::project(usmain, \"EPSG:5070\") plot(usmain)"},{"path":"https://niehs.github.io/beethoven/articles/prediction_points.html","id":"generate","dir":"Articles","previous_headings":"","what":"Generate","title":"Generate prediction points","text":"Regular random points can generated extent polygon object terra::spatSample() sf::st_sample(). faster way generating regular points leverage raster object, cells organized regular grid. code block generates 1-km resolution grid points following steps: Identify corners generate rectangular extent (.e., SpatExtent object terra::ext()) Create SpatRaster object fixed resolution coordinate system (case, EPSG:5070) Assign value void raster Crop raster object mainland US polygon Convert cropped raster points (SpatVector object) Convert SpatVector object three-column data.frame object Save data.frame object step 6 RDS file Steps 6 7 reduce file size substantially data data.frame step 6 numeric type. means data can compressed efficiently. map 10-km grid points mainland US faster rendering. actual 1-km result look denser.","code":"corner_ul <- c(-2.40, 3.26) * 1e6 corner_lr <- c(2.40, 0.12) * 1e6  corners <- c(corner_ul, corner_lr) # reorganize xmin, ymin, xmax, ymax, which are ll, ur form corners_re <- corners[c(1, 3, 4, 2)] names(corners_re) <- c(\"xmin\", \"xmax\", \"ymin\", \"ymax\") corners_ext <- terra::ext(corners_re) corners_ras <-   terra::rast(     corners_ext,     resolution = c(1000L, 1000L),     crs = \"EPSG:5070\"   )  terra::values(corners_ras) <- 1L corners_ras_sub <-   terra::crop(     corners_ras,     usmain,     snap = \"out\",     mask = TRUE   )  corners_pnts <- terra::as.points(corners_ras_sub) corners_pnts_df <- as.data.frame(corners_pnts, geom = \"XY\") corners_pnts_df$site_id <- seq(1, nrow(corners_pnts_df)) names(corners_pnts_df)[2:3] <- c(\"lon\", \"lat\") corners_pnts_df <- corners_pnts_df[, c(\"site_id\", \"lon\", \"lat\")] saveRDS(   corners_pnts_df,   file = \"./input/prediction_grid.rds\",   compress = \"xz\" ) plot(   corners_pnts10,   cex = 0.1,   main = \"10-km grid points in the mainland US\" )"},{"path":"https://niehs.github.io/beethoven/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Messier. Author, maintainer. Insang Song. Author, contributor. Eva Marques. Author, contributor. Ranadeep Daw. Author, contributor. Mitchell Manware. Author, contributor. Daniel Zilber. Author, contributor. Anisha Singh. Author, contributor. Lara Clark. Author, contributor. Cavin Ward-Caviness. Author, contributor. Mariana Alifa Kassien. Author, contributor.","code":""},{"path":"https://niehs.github.io/beethoven/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Messier K, Song , Marques E, Daw R, Manware M, Zilber D, Singh , Clark L, Ward-Caviness C, Alifa Kassien M (2024). beethoven: Building Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model air quality. R package version 0.3.0,, https://github.com/NIEHS/beethoven.","code":"@Manual{,   title = {beethoven: Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality},   author = {Kyle Messier and Insang Song and Eva Marques and Ranadeep Daw and Mitchell Manware and Daniel Zilber and Anisha Singh and Lara Clark and Cavin Ward-Caviness and Mariana {Alifa Kassien}},   year = {2024},   note = {R package version 0.3.0,},   url = {https://github.com/NIEHS/beethoven}, }"},{"path":"https://niehs.github.io/beethoven/index.html","id":"building-an-extensible-reproducible-test-driven-harmonized-open-source-versioned-ensemble-model-for-air-quality","dir":"","previous_headings":"","what":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"Group Project Spatiotemporal Exposures Toxicology group help friends 😃 🤠 🌎","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"","code":"remotes::install_github(\"NIEHS/beethoven\")"},{"path":"https://niehs.github.io/beethoven/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"","code":"TODO"},{"path":"https://niehs.github.io/beethoven/index.html","id":"overall-project-workflow","dir":"","previous_headings":"","what":"Overall Project Workflow","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"Targets: Make-like Reproducible Analysis Pipeline 1) AQS Data 2) Generate Covariates 3) Fit Base Learners 4) Fit Meta Learners 5) Predictions 6) Summary Stats Placeholder --date rendering targets","code":"tar_visnetwork(targets)"},{"path":"https://niehs.github.io/beethoven/index.html","id":"project-organization","dir":"","previous_headings":"","what":"Project Organization","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":", describe structure project naming conventions used. date file paths names recorded reference.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/index.html","id":"folder-structure","dir":"","previous_headings":"Project Organization > File Structure","what":"Folder Structure","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"R/ main R code (e.g. .R files) lives. Nothing else .R files . .e. Target helper functions, model fitting post-processing, plotting summary functions. testthat Unit integration tests CI/CD reside testdata Small test datasets including small (size) complete pipeline testing. testthat.R Special script created maintained testthat man/ sub-directory contains .Rd othe files created roxygen2 package assisted documentation R packages vignettes/ Rmd (potentially Qmd) narrative text code files. rendered Articles package website created pkgdown targets include important pipeline file _targets.R lookup subdirectory text file lookup table used pipeline synchronize paths, names, abbreviations, etc. .github/workflows/ hidden directory GitHub CI/CD yaml files reside","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"the-following-sub-directories-are-not-including-the-package-build-and-included-only-in-the-source-code-here","dir":"","previous_headings":"Project Organization > File Structure > Folder Structure","what":"The following sub-directories are not including the package build and included only in the source code here","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"tools/ sub-directory dedicated educational demonstration material (e.g. Rshiny). input/ warning soon deprecated sub-directory contains data used analysis. going superceded use targets output/ warning: soon deprecated sub-directory contains data used analysis. going superceded use targets Currently, 3/29/24, output folder contains .rds files covariates/features model development. e.g.: NRTAP_Covars_NLCD.rds NRTAP_Covars_TRI.rds","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"relevant-files","dir":"","previous_headings":"Project Organization > File Structure","what":"Relevant files","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"LICENSE DESCRIPTION NAMESPACE README.md","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"naming-conventions","dir":"","previous_headings":"Project Organization","what":"Naming Conventions","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"Naming things hard somewhat subjective. Nonetheless, consistent naming conventions make better reproducibility, interpretability, future extensibility. , provide beethoven naming conventions objects used targets naming functions within package (.e. R/). tar_target functions, use following naming conventions: Naming conventions tar objects. motivated Compositional Forecast (CF) model naming conventions: e.g. [surface] [component] standard_name [surface] [medium] [due process] [assuming condition] CF, entire process can known required optional naming pieces. , use following naming convention: [R object type]_[role-suffix]_[stage]_[source]_[spacetime] section brackets [] appears order. objects, naming sections required. two keywords section apply, appended - Examples: 1) sf_PM25_log10-fit_AQS_siteid sf object PM25 data log-transformed ready base-learner fitting, derived AQS data located siteid locations. 2) SpatRast_process_MODIS terra SpatRast object processed MODIS.","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"naming-section-definitions","dir":"","previous_headings":"Project Organization > Naming Conventions","what":"Naming section definitions:","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"R object type: sf, datatable, tibble, SpatRaster, SpatVector role: Detailed description role object pipeline. Allowable keywords: PM25 feature (.e. geographic covariate) base_model suffix types: linear, random_forest, xgboost, neural_net etc. meta_model prediction plot -plot suffix types: scatter, map, time_series, histogram, density etc. stage: stage pipeline object used . Object transformations also articulated . Allowable keywords: raw process calc fit: Ready base/meta learner fitting result: Final result log log10 source: original data source AQS MODIS GMTED NLCD NARR GEOSCF TRI KOPPENGEIGER MERRA2 HMS gROADS POPULATION [Note, can add /update sources needed] spacetime: relevant spatial temporal information siteid censustract grid daily [optional YYYYMMDD] annual [optional YYYY] Short Verion: shortened version filenames available punchcard tools/pipeline/punchcard.csv","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"function-naming-convenctions","dir":"","previous_headings":"Project Organization","what":"Function Naming Convenctions","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"adopted naming conventions functions package well amadeus key input package. [High-Level-Process]_[Source]_[Object] High-Level-Process download process calc source: original data source. source section tar objects Object object function may acting base_model meta_model feature","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"configuration-file","dir":"","previous_headings":"Project Organization","what":"Configuration file","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"Configuration file (inst/targets/targets_configuration.csv) designed centralize pipeline settings without needs editing pipeline scripts manually. stores command run, associated value command, naming conventions. helper function meta_run() inst/targets/pipeline_base_functions.R reads function name first argument pass helper functions control target pipeline. example, entry configuration file look like meta_run() call command using key value stored name_targets_short fields. load two character values, stored command value field, respectively, row name_targets_short == key. example , meta_run(\"extent\") call strsplit(\"-126|-62|22|52\", ...). course, users furnish call mandatory argument split (split = \"|\", specifically). one complex example use meta_run() configuration file; values file require additional arguments. good practice take care value field’s values running pipeline without modifying command name_targets_short fields.","code":"\"index\",\"last_updated\",\"command\",\"name_targets_short\",\"value\",\"class\",\"name_targets_long\",\"rclass\",\"role_suffix\",\"stage\",\"source\",\"spacetime\",\"remarks\" 95,\"2024/3/15\",\"strsplit\",\"extent\",\"-126|-62|22|52\",\"domain\",\"character_feature_calcextent\",\"character\",\"feature\",\"calc\",\"\",\"extent\",\"\""},{"path":"https://niehs.github.io/beethoven/index.html","id":"high-performance-computing","dir":"","previous_headings":"Project Organization","what":"High-performance computing","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"beethoven pipeline configured SLURM. high-performance computing platforms, consult documentation platform edit _targets.R inst/targets/targets_calculate.R accordingly.","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Time Column — add_time_col","title":"Add Time Column — add_time_col","text":"function adds time column data frame.","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Time Column — add_time_col","text":"","code":"add_time_col(df, time_value, time_id = \"time\")"},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Time Column — add_time_col","text":"df data frame time column added. time_value value assigned time column. time_id name time column (default \"time\").","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Time Column — add_time_col","text":"data frame added time column.","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Time Column — add_time_col","text":"","code":"if (FALSE) { df <- data.frame(x = 1:5, y = letters[1:5]) add_time_col(df, \"2022-01-01\") }"},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Predecessors — append_predecessors","title":"Append Predecessors — append_predecessors","text":"function appends predecessors existing object creates new object none exists.","code":""},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Predecessors — append_predecessors","text":"","code":"append_predecessors(   path_qs = \"output/qs\",   period_new = NULL,   input_new = NULL,   nthreads = 8L )"},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Predecessors — append_predecessors","text":"path_qs path predecessors stored. period_new new period appended. input_new new input object appended. nthreads number threads used.","code":""},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Predecessors — append_predecessors","text":"existing predecessors found, function saves new input object returns name saved file. existing predecessors found, function appends new input object existing ones returns combined object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach XY coordinates to a data frame — attach_xy","title":"Attach XY coordinates to a data frame — attach_xy","text":"function attaches XY coordinates data frame based spatial object containing coordinates. performs left join operation match coordinates corresponding locations data frame.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach XY coordinates to a data frame — attach_xy","text":"","code":"attach_xy(data_full, data_sf, locs_id = \"site_id\", time_id = \"time\")"},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach XY coordinates to a data frame — attach_xy","text":"data_full full data frame XY coordinates attached. data_sf spatial object containing XY coordinates. locs_id column name spatial object represents location identifier. time_id column name data frame represents time identifier.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach XY coordinates to a data frame — attach_xy","text":"data frame XY coordinates attached.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":null,"dir":"Reference","previous_headings":"","what":"Process atmospheric composition data by chunks (v3) — calc_geos_strict","title":"Process atmospheric composition data by chunks (v3) — calc_geos_strict","text":"Returning single SpatRasterDataset object. Removed tapp performance; impose strict assumption missing values","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process atmospheric composition data by chunks (v3) — calc_geos_strict","text":"","code":"calc_geos_strict(   path = NULL,   date = c(\"2018-01-01\", \"2018-01-01\"),   locs = NULL,   locs_id = NULL,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process atmospheric composition data by chunks (v3) — calc_geos_strict","text":"path character(1). Directory downloaded netCDF (.nc4) files. netCDF file paths. date character(2). length 10. Format \"YYYY-MM-DD\". locs Locations extract. locs_id character(1). Location identifier. ... Arguments passed terra::rast.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process atmospheric composition data by chunks (v3) — calc_geos_strict","text":"SpatRaster object;","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process atmospheric composition data by chunks (v3) — calc_geos_strict","text":"Layer names returned SpatRaster object contain variable, pressure level, date Reference duration: 1 day summary, layers: 106 seconds hard-coded subsets subdataset selection","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process atmospheric composition data by chunks (v3) — calc_geos_strict","text":"Mitchell Manware, Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":null,"dir":"Reference","previous_headings":"","what":"Reflown gmted processing — calc_gmted_direct","title":"Reflown gmted processing — calc_gmted_direct","text":"Reflown gmted processing","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reflown gmted processing — calc_gmted_direct","text":"","code":"calc_gmted_direct(   variable = NULL,   path = NULL,   locs = NULL,   locs_id = NULL,   win = c(-126, -62, 22, 52),   radius = 0,   fun = \"mean\",   ... )"},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reflown gmted processing — calc_gmted_direct","text":"variable character(2). Statistic resolution. path character(1). Directory downloaded GMTED files. locs data.frame/SpatVector/sf. Locations. locs_id character(1). Location identifier. win numeric(4). Window raster. radius numeric(1). Radius extraction. fun character(1). Function apply. ... Additional parameters passed functions.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reflown gmted processing — calc_gmted_direct","text":"data.frame containing extracted GMTED data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate aggregated values for specified locations — calc_narr2","title":"Calculate aggregated values for specified locations — calc_narr2","text":"function calculates aggregated values specified locations raster dataset.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate aggregated values for specified locations — calc_narr2","text":"","code":"calc_narr2(from, locs, locs_id = NULL, radius = 0, fun = \"mean\", ...)"},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate aggregated values for specified locations — calc_narr2","text":"raster dataset extract values. locs data frame containing locations calculate aggregated values. column locs_id value contains unique identifiers location. locs_id optional column name locs data frame contains additional location identifiers. radius radius within include neighboring locations aggregation. Default 0. fun aggregation function use. can character string specifying function name (e.g., \"mean\", \"sum\"), can custom function. Default \"mean\". ... Additional arguments passed aggregation function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate aggregated values for specified locations — calc_narr2","text":"data frame containing aggregated values location time point.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatiotemporal covariate calculation — calculate","title":"Spatiotemporal covariate calculation — calculate","text":"Spatiotemporal covariate calculation","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatiotemporal covariate calculation — calculate","text":"","code":"calculate(   domain = NULL,   domain_name = \"year\",   nthreads = 1L,   process_function = amadeus::process_covariates,   calc_function = amadeus::calc_covariates,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatiotemporal covariate calculation — calculate","text":"domain vector integer/character/Date. Depending temporal resolution raw datasets. Nullable; NULL, set c(1). domain_name character(1). Name domain. Default \"year\". nthreads integer(1). Number threads use. process_function Raw data processor. Default amadeus::process_covariates calc_function Function calculate covariates. amadeus::calc_covariates ... Arguments passed process_function calc_function","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatiotemporal covariate calculation — calculate","text":"data.table object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate manual rset object from spatiotemporal cross-validation indices — convert_cv_index_rset","title":"Generate manual rset object from spatiotemporal cross-validation indices — convert_cv_index_rset","text":"Generate manual rset object spatiotemporal cross-validation indices","code":""},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate manual rset object from spatiotemporal cross-validation indices — convert_cv_index_rset","text":"","code":"convert_cv_index_rset(cvindex, data, ref_list = NULL, cv_mode = \"spt\")"},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate manual rset object from spatiotemporal cross-validation indices — convert_cv_index_rset","text":"cvindex integer length nrow(data). data data.frame. ref_list List custom reference indices. Default NULL. NULL, used reference instead max(cvindex). cv_mode character(1). Spatiotemporal cross-validation indexing method label.","code":""},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate manual rset object from spatiotemporal cross-validation indices — convert_cv_index_rset","text":"rset object rsample package. tibble list column training-test data.frames column labels.","code":""},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate manual rset object from spatiotemporal cross-validation indices — convert_cv_index_rset","text":"Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/df_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data.frame of function parameters — df_params","title":"Get data.frame of function parameters — df_params","text":"Get data.frame function parameters","code":""},{"path":"https://niehs.github.io/beethoven/reference/df_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data.frame of function parameters — df_params","text":"","code":"df_params(functions)"},{"path":"https://niehs.github.io/beethoven/reference/df_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data.frame of function parameters — df_params","text":"functions character. Vector function names.","code":""},{"path":"https://niehs.github.io/beethoven/reference/df_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data.frame of function parameters — df_params","text":"data.frame containing parameters functions.","code":""},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Divisors — divisor","title":"Get Divisors — divisor","text":"Get Divisors","code":""},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Divisors — divisor","text":"","code":"divisor(x)"},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Divisors — divisor","text":"x integer(1). positive integer.","code":""},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Divisors — divisor","text":"vector divisors x.","code":""},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file status and download if necessary — feature_raw_download","title":"Check file status and download if necessary — feature_raw_download","text":"Check file status download necessary","code":""},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file status and download if necessary — feature_raw_download","text":"","code":"feature_raw_download(path = NULL, dataset_name = NULL, ...)"},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file status and download if necessary — feature_raw_download","text":"path download path. dataset_name Dataset name. See amadeus::download_data details. ... Arguments passed amadeus::download_data","code":""},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file status and download if necessary — feature_raw_download","text":"logical(1).","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_brulee.html","id":null,"dir":"Reference","previous_headings":"","what":"Base learner: Multilayer perceptron with brulee — fit_base_brulee","title":"Base learner: Multilayer perceptron with brulee — fit_base_brulee","text":"Multilayer perceptron model different configurations hidden units, dropout, activation, learning rate using brulee tidymodels. proper settings, users can utilize graphics processing units (GPU) speed training process.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_brulee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base learner: Multilayer perceptron with brulee — fit_base_brulee","text":"","code":"fit_base_brulee(   dt_imputed,   folds = NULL,   r_subsample = 0.3,   yvar = \"Arithmetic.Mean\",   xvar = seq(6, ncol(dt_imputed)),   vfold = 5L,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/fit_base_brulee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base learner: Multilayer perceptron with brulee — fit_base_brulee","text":"dt_imputed input data table used fitting. folds pre-generated rset object. NULL, numeric used rsample::vfold_cv. r_subsample proportion rows sampled. yvar target variable. xvar predictor variables. vfold number folds cross-validation. ... Additional arguments passed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_brulee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base learner: Multilayer perceptron with brulee — fit_base_brulee","text":"fitted workflow.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_brulee.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Base learner: Multilayer perceptron with brulee — fit_base_brulee","text":"tune package 1.2.0 higher.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_elnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Base learner: Elastic net — fit_base_elnet","title":"Base learner: Elastic net — fit_base_elnet","text":"Elastic net model fitted defined rate (r_subsample) input dataset grid search.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_elnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base learner: Elastic net — fit_base_elnet","text":"","code":"fit_base_elnet(   dt_imputed,   folds = NULL,   r_subsample = 0.3,   yvar = \"Arithmetic.Mean\",   xvar = seq(6, ncol(dt_imputed)),   vfold = 5L,   nthreads = 16L,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/fit_base_elnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base learner: Elastic net — fit_base_elnet","text":"dt_imputed input data table used fitting. folds pre-generated rset object. NULL, numeric used rsample::vfold_cv. r_subsample proportion rows sampled. yvar target variable. xvar predictor variables. vfold number folds cross-validation. nthreads number threads used. Default 16L. ... Additional arguments passed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_elnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base learner: Elastic net — fit_base_elnet","text":"fitted workflow.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_elnet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Base learner: Elastic net — fit_base_elnet","text":"tune package 1.2.0 higher.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_xgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Base learner: Extreme gradient boosting (XGBoost) — fit_base_xgb","title":"Base learner: Extreme gradient boosting (XGBoost) — fit_base_xgb","text":"XGBoost model fitted defined rate (r_subsample) input dataset grid search. proper settings, users can utilize graphics processing units (GPU) speed training process.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_xgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base learner: Extreme gradient boosting (XGBoost) — fit_base_xgb","text":"","code":"fit_base_xgb(   dt_imputed,   folds = NULL,   r_subsample = 0.3,   yvar = \"Arithmetic.Mean\",   xvar = seq(6, ncol(dt_imputed)),   vfold = 5L,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/fit_base_xgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base learner: Extreme gradient boosting (XGBoost) — fit_base_xgb","text":"dt_imputed input data table used fitting. folds pre-generated rset object. NULL, numeric used rsample::vfold_cv. r_subsample proportion rows sampled. yvar target variable. xvar predictor variables. vfold number folds cross-validation. ... Additional arguments passed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_xgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base learner: Extreme gradient boosting (XGBoost) — fit_base_xgb","text":"fitted workflow.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_xgb.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Base learner: Extreme gradient boosting (XGBoost) — fit_base_xgb","text":"tune package 1.2.0 higher.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate spatio-temporal cross-validation index with anticlust — generate_cv_index","title":"Generate spatio-temporal cross-validation index with anticlust — generate_cv_index","text":"function generates spatio-temporal cross-validation index based anticlust package. function first calculates spatial clustering index using balanced_clustering function default, cv_pairs provided, generates rank-based pairs based proximity cluster centroids.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate spatio-temporal cross-validation index with anticlust — generate_cv_index","text":"","code":"generate_cv_index(   data,   target_cols = c(\"lon\", \"lat\", \"time\"),   preprocessing = c(\"none\", \"normalize\", \"standardize\"),   cv_fold = 5L,   cv_pairs = NULL,   pairing = c(\"1\", \"2\"),   cv_mode = \"spt\" )"},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate spatio-temporal cross-validation index with anticlust — generate_cv_index","text":"data data.table X, Y, time information. target_cols character(3). Names columns X, Y, time. Default c(\"lon\", \"lat\", \"time\"). Order insensitive. preprocessing character(1). Preprocessing method. \"none\": preprocessing. \"normalize\": normalize data. \"standardize\": standardize data. cv_fold integer(1). Number folds cross-validation. default 5L. cv_pairs integer(1). Number pairs cross-validation. value used generate rank-based pairs based target_cols values. pairing character(1) Pair selection method. \"1\": search nearest cluster others selected based rank. \"2\": rank pairwise distances directly cv_mode character(1). Spatiotemporal cross-validation indexing","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate spatio-temporal cross-validation index with anticlust — generate_cv_index","text":"rsample::manual_rset() object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate spatio-temporal cross-validation index with anticlust — generate_cv_index","text":"nrow(data) %% cv_fold 0.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate spatio-temporal cross-validation index with anticlust — generate_cv_index","text":"Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/grapes-tin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a query date falls within a time interval — %tin%","title":"Check if a query date falls within a time interval — %tin%","text":"function checks given query date falls within time interval defined vector two dates.","code":""},{"path":"https://niehs.github.io/beethoven/reference/grapes-tin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a query date falls within a time interval — %tin%","text":"","code":"query_date %tin% tvec"},{"path":"https://niehs.github.io/beethoven/reference/grapes-tin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a query date falls within a time interval — %tin%","text":"query_date query date check. tvec vector two dates defining time interval.","code":""},{"path":"https://niehs.github.io/beethoven/reference/grapes-tin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a query date falls within a time interval — %tin%","text":"TRUE query date falls within time interval, FALSE otherwise.","code":""},{"path":"https://niehs.github.io/beethoven/reference/grapes-tin-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a query date falls within a time interval — %tin%","text":"","code":"if (FALSE) { query_date <- as.Date(\"2022-01-01\") tvec <- c(as.Date(\"2021-01-01\"), as.Date(\"2023-01-01\")) `%tin%`(query_date, tvec) }"},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute missing values and attach lagged features — impute_all","title":"Impute missing values and attach lagged features — impute_all","text":"Impute missing values attach lagged features","code":""},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute missing values and attach lagged features — impute_all","text":"","code":"impute_all(   dt,   period,   nthreads_dt = 32L,   nthreads_collapse = 32L,   nthreads_imputation = 32L )"},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute missing values and attach lagged features — impute_all","text":"dt input data table imputed. period period lagged features. nthreads_dt number threads used data.table operations. nthreads_collapse number threads used collapse operations. nthreads_imputation number threads used imputation process.","code":""},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute missing values and attach lagged features — impute_all","text":"imputed data table lagged features.","code":""},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Impute missing values and attach lagged features — impute_all","text":"construction. function performs imputation given data table replacing missing values imputed values. follows series steps including data cleaning, name cleaning, geoscf column renaming, NDVI 16-day backward filling, zero-variance exclusion, excessive \"true zeros\" exclusion, imputation using missRanger.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects the calculate function with specified arguments. — inject_calculate","title":"Injects the calculate function with specified arguments. — inject_calculate","text":"function injects calculate function specified arguments, allowing dynamic customization function's behavior.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects the calculate function with specified arguments. — inject_calculate","text":"","code":"inject_calculate(covariate, locs, injection)"},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects the calculate function with specified arguments. — inject_calculate","text":"covariate character(1). name covariate calculated. locs locations used calculation. injection Additional arguments injected calculate function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects the calculate function with specified arguments. — inject_calculate","text":"result calculate function injected arguments.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Injects the calculate function with specified arguments. — inject_calculate","text":"","code":"if (FALSE) { inject_calculate(   locs = my_locs, buffer = 10, domain = my_domain,   injection = list(arg1 = \"value1\", arg2 = \"value2\") ) }"},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects geographic information into a data frame — inject_geos","title":"Injects geographic information into a data frame — inject_geos","text":"function injects geographic information data frame using calc_geos_strict function. injected information includes latitude longitude coordinates based specified locations, location ID column, window range, snapping option.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects geographic information into a data frame — inject_geos","text":"","code":"inject_geos(locs, injection)"},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects geographic information into a data frame — inject_geos","text":"locs data frame containing locations geographic information needs injected. injection list additional arguments passed calc_geos_strict function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects geographic information into a data frame — inject_geos","text":"modified data frame injected geographic information.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects GMTED data into specified locations — inject_gmted","title":"Injects GMTED data into specified locations — inject_gmted","text":"function injects GMTED (Global Multi-resolution Terrain Elevation Data) specified locations. calculates GMTED values location within different radii returns merged results.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects GMTED data into specified locations — inject_gmted","text":"","code":"inject_gmted(locs, variable, radii, injection, nthreads = 4L)"},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects GMTED data into specified locations — inject_gmted","text":"locs data frame/sf/SpatVector containing locations GMTED variables needs calculated variable variable GMTED data needs calculated. radii vector radii GMTED data needs calculated. injection list additional arguments passed calc_gmted_direct function. nthreads number threads used parallel processing. Default 4.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects GMTED data into specified locations — inject_gmted","text":"data frame containing merged results GMTED data location within different radii.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects arguments to parallelize MODIS/VIIRS data processing — inject_modis_par","title":"Injects arguments to parallelize MODIS/VIIRS data processing — inject_modis_par","text":"Injects arguments parallelize MODIS/VIIRS data processing","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects arguments to parallelize MODIS/VIIRS data processing — inject_modis_par","text":"","code":"inject_modis_par(locs, domain, injection)"},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects arguments to parallelize MODIS/VIIRS data processing — inject_modis_par","text":"locs data frame containing locations MODIS features need calculated. domain domain MODIS PAR data injected. injection Additional parameters passed calc_modis_par function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects arguments to parallelize MODIS/VIIRS data processing — inject_modis_par","text":"modified domain injected MODIS PAR data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Load MODIS files from a specified path. — load_modis_files","title":"Load MODIS files from a specified path. — load_modis_files","text":"function takes path optional pattern input returns list MODIS files found specified path.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load MODIS files from a specified path. — load_modis_files","text":"","code":"load_modis_files(path, pattern = \"hdf$\", date = character(2))"},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load MODIS files from a specified path. — load_modis_files","text":"path path MODIS files located. pattern optional regular expression pattern filter files. default pattern \"hdf$\". date vector two dates filter files . default empty character vector.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load MODIS files from a specified path. — load_modis_files","text":"list full file names MODIS files found specified path.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load MODIS files from a specified path. — load_modis_files","text":"","code":"if (FALSE) { # Load MODIS files from the current directory modis_files <- load_modis_files(\".\")  # Load MODIS files from a specific directory with a custom pattern modis_files <- load_modis_files(\"/path/to/files\", pattern = \"MOD.*hdf$\") }"},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":null,"dir":"Reference","previous_headings":"","what":"Load arguments from the formatted argument list file — loadargs","title":"Load arguments from the formatted argument list file — loadargs","text":"Load arguments formatted argument list file","code":""},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load arguments from the formatted argument list file — loadargs","text":"","code":"loadargs(argfile, dataset)"},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load arguments from the formatted argument list file — loadargs","text":"argfile character(1). Path argument file. RDS format. dataset character(1). Dataset name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load arguments from the formatted argument list file — loadargs","text":"list arguments.","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a BART (Bayesian Additive Regression Tree) meta learner. It takes predictions of other models such as kriging, GLM, machine learning models as input and fits a BART Model — meta_learner_fit","title":"Fit a BART (Bayesian Additive Regression Tree) meta learner. It takes predictions of other models such as kriging, GLM, machine learning models as input and fits a BART Model — meta_learner_fit","text":"Fit BART (Bayesian Additive Regression Tree) meta learner. takes predictions models kriging, GLM, machine learning models input fits BART Model","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a BART (Bayesian Additive Regression Tree) meta learner. It takes predictions of other models such as kriging, GLM, machine learning models as input and fits a BART Model — meta_learner_fit","text":"","code":"meta_learner_fit(base_predictor_list, kfolds, y, ...)"},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a BART (Bayesian Additive Regression Tree) meta learner. It takes predictions of other models such as kriging, GLM, machine learning models as input and fits a BART Model — meta_learner_fit","text":"base_predictor_list P x 1 list P = p base predictor vector (numeric). predictor vector length named. kfolds integer, index k-folds cross-validation. produced regards spatial /temporal considerations y dependent variable ... Passed arguments wbart","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a BART (Bayesian Additive Regression Tree) meta learner. It takes predictions of other models such as kriging, GLM, machine learning models as input and fits a BART Model — meta_learner_fit","text":"meta_fit_obj object meta learner","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a BART (Bayesian Additive Regression Tree) meta learner. It takes predictions of other models such as kriging, GLM, machine learning models as input and fits a BART Model — meta_learner_fit","text":"","code":"NULL #> NULL"},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","title":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","text":"meta learner used package, Bayesian Additive Regression Tree (BART), explicitly spatiotemporal model, input covariates (outputs base learner) S-T based.","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","text":"","code":"meta_learner_predict(meta_fit, base_outputs_stdt, nthreads = 2)"},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","text":"meta_fit list BART objects meta_learner_fit base_outputs_stdt stdt object. list datatable containing lat, lon, time covariates (outputs base learner) prediction locations crs. nthreads integer(1). Number threads used BART::predict.wbart","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","text":"meta_pred: final meta learner predictions","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_predict.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","text":"predictions can rast sf, depends respective format covariance matrix input - cov_pred","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_predict.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","text":"https://rspatial.github.io/terra/reference/predict.html","code":""},{"path":"https://niehs.github.io/beethoven/reference/meta_learner_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create meta_learner predictions from the list of BART fit objects and predictions of base learners — meta_learner_predict","text":"","code":"NULL #> NULL"},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallelize NARR feature calculation — par_narr","title":"Parallelize NARR feature calculation — par_narr","text":"function parallelizes processing calculation NARR data multiple domains.","code":""},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelize NARR feature calculation — par_narr","text":"","code":"par_narr(domain, date, locs, nthreads = 24L)"},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelize NARR feature calculation — par_narr","text":"domain character vector specifying domains process. date character vector specifying date NARR data process. locs data frame specifying locations calculate NARR data . nthreads integer specifying number threads use parallel processing. Default 24.","code":""},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallelize NARR feature calculation — par_narr","text":"list results parallel processing.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic joining by the time and spatial identifiers — post_calc_autojoin","title":"Automatic joining by the time and spatial identifiers — post_calc_autojoin","text":"key assumption data frames time field spatial field data one date year. Whether input time unit year date determined coercion first row value time field character .Date(). function fail gets year-like string length 4.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic joining by the time and spatial identifiers — post_calc_autojoin","text":"","code":"post_calc_autojoin(   df_fine,   df_coarse,   field_sp = \"site_id\",   field_t = \"time\",   year_start = 2018L,   year_end = 2022L )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic joining by the time and spatial identifiers — post_calc_autojoin","text":"df_fine fine-grained data frame. df_coarse coarse-grained data frame. field_sp name spatial field data frames. field_t name time field data frames. year_start starting year time period. year_end ending year time period.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic joining by the time and spatial identifiers — post_calc_autojoin","text":"merged data table.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic joining by the time and spatial identifiers — post_calc_autojoin","text":"","code":"if (FALSE) { df_fine0 <- data.frame(site_id = c(\"A\", \"B\", \"B\", \"C\"),                       time = as.Date(c(\"2022-01-01\", \"2022-01-02\", \"2021-12-31\", \"2021-01-03\")),                       value = c(1, 2, 3, 5)) df_coarse0 <- data.frame(site_id = c(\"A\", \"B\", \"C\"),                         time = c(\"2022\", \"2022\", \"2021\"),                         other_value = c(10, 20, 30)) jdf <- post_calc_autojoin(df_fine0, df_coarse0) print(jdf) }"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time column to character — post_calc_convert_time","title":"Convert time column to character — post_calc_convert_time","text":"Convert time column character","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time column to character — post_calc_convert_time","text":"","code":"post_calc_convert_time(df)"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time column to character — post_calc_convert_time","text":"df data.table","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert time column to character — post_calc_convert_time","text":"function takes preprocessed data.table column named \"time\".","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a data frame by year — post_calc_df_year_expand","title":"Expand a data frame by year — post_calc_df_year_expand","text":"function expands data frame year, creating multiple rows year based time period specified.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a data frame by year — post_calc_df_year_expand","text":"","code":"post_calc_df_year_expand(   df,   locs_id = \"site_id\",   time_field = \"time\",   time_start = NULL,   time_end = NULL,   time_unit = \"year\",   time_available = NULL,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a data frame by year — post_calc_df_year_expand","text":"df input data frame. locs_id column name location identifier data frame. time_field column name time field data frame. time_start start time period. time_end end time period. time_unit unit time expand data frame. record. time_available vector available time periods. ... Placeholders.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a data frame by year — post_calc_df_year_expand","text":"expanded data frame multiple rows year.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Expand a data frame by year — post_calc_df_year_expand","text":"Year expansion rule assign nearest past year available years;#' past year available years, first available year rolled back start time period.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a data frame by year — post_calc_df_year_expand","text":"","code":"if (FALSE) { df <- data.frame(year = c(2010, 2010, 2011, 2012),                  value = c(1, 2, 3, 4)) df_expanded <-   post_calc_df_year_expand(df, locs_id = \"site_id\", time_field = \"year\",                            time_start = 2011, time_end = 2012,                            time_unit = \"year\") print(df_expanded) }"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove columns from a data frame based on regular expression patterns. — post_calc_drop_cols","title":"Remove columns from a data frame based on regular expression patterns. — post_calc_drop_cols","text":"Remove columns data frame based regular expression patterns.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove columns from a data frame based on regular expression patterns. — post_calc_drop_cols","text":"","code":"post_calc_drop_cols(   df,   candidates = \"(^lon$|^lat$|geoid|year$|description|geometry)\",   strict = FALSE )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove columns from a data frame based on regular expression patterns. — post_calc_drop_cols","text":"df input data frame. candidates character vector regular expression patterns match column names. Columns match patterns removed. default value \"^lon$|^lat$|geoid|year$|description\". strict logical(1). TRUE, c(\"site_id\", \"time\") kept.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove columns from a data frame based on regular expression patterns. — post_calc_drop_cols","text":"modified data frame specified columns removed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove columns from a data frame based on regular expression patterns. — post_calc_drop_cols","text":"","code":"if (FALSE) { df <- data.frame(lon = 1:5, lat = 6:10, geoid = 11:15, year = 2010:2014,                  description = letters[1:5], other = 16:20) post_calc_drop_cols(df) }"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":null,"dir":"Reference","previous_headings":"","what":"Join a data.frame with a year-only date column to that with a full date column — post_calc_join_yeardate","title":"Join a data.frame with a year-only date column to that with a full date column — post_calc_join_yeardate","text":"full date column converted year column new column, data.frame year-column joined.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join a data.frame with a year-only date column to that with a full date column — post_calc_join_yeardate","text":"","code":"post_calc_join_yeardate(   df_year,   df_date,   field_year = \"time\",   field_date = \"time\",   spid = \"site_id\" )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join a data.frame with a year-only date column to that with a full date column — post_calc_join_yeardate","text":"df_year data.frame year-date column df_date data.frame full date column field_year character(1). Year column df_year field_date character(1). Date column df_date spid character(1). Name unique location identifier field.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join a data.frame with a year-only date column to that with a full date column — post_calc_join_yeardate","text":"data.frame","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge spatial and spatiotemporal covariate data — post_calc_merge_all","title":"Merge spatial and spatiotemporal covariate data — post_calc_merge_all","text":"Merge spatial spatiotemporal covariate data","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge spatial and spatiotemporal covariate data — post_calc_merge_all","text":"","code":"post_calc_merge_all(   locs,   locs_id,   time_id,   target_years = seq(2018, 2022),   df_sp,   df_spt )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge spatial and spatiotemporal covariate data — post_calc_merge_all","text":"locs Location. e.g., AQS sites. locs_id character(1). Location identifier. time_id character(1). Location identifier. target_years integer. Used dummify nominal year. df_sp data.frame. Spatial-covariates. df_spt data.frame. Spatiotemporal covariates.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge spatial and spatiotemporal covariate data — post_calc_merge_all","text":"data.frame","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Merge spatial and spatiotemporal covariate data — post_calc_merge_all","text":"version assumes time_id contains Date-like strings.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge input data.frame objects — post_calc_merge_features","title":"Merge input data.frame objects — post_calc_merge_features","text":"Merge input data.frame objects","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge input data.frame objects — post_calc_merge_features","text":"","code":"post_calc_merge_features(by = c(\"site_id\"), time = FALSE, ...)"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge input data.frame objects — post_calc_merge_features","text":"character. Joining keys. See merge details. time logical(1). Whether include time identifier. Set TRUE supersede value appending time identifier. ... data.frame objects merge","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge input data.frame objects — post_calc_merge_features","text":"data.table","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":null,"dir":"Reference","previous_headings":"","what":"Change time column name — post_calc_unify_timecols","title":"Change time column name — post_calc_unify_timecols","text":"Change time column name","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change time column name — post_calc_unify_timecols","text":"","code":"post_calc_unify_timecols(df, candidates = c(\"year\"), replace = \"time\")"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change time column name — post_calc_unify_timecols","text":"df data.frame candidates character. Candidate column names. replace character. New column name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change time column name — post_calc_unify_timecols","text":"data.frame","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Map the available raw data years over the given period — post_calc_year_expand","title":"Map the available raw data years over the given period — post_calc_year_expand","text":"Many raw datasets periodically updated period longer year. function maps available years given period.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map the available raw data years over the given period — post_calc_year_expand","text":"","code":"post_calc_year_expand(   time_start = NULL,   time_end = NULL,   time_unit = \"year\",   time_available = NULL )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map the available raw data years over the given period — post_calc_year_expand","text":"time_start integer(1). Starting year. time_end integer(1). Ending year. time_unit character(1). Time unit. Default \"year\". time_available vector. Available years.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map the available raw data years over the given period — post_calc_year_expand","text":"integer vector length (time_end - time_start + 1). element get nearest preceeding available year.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Map the available raw data years over the given period — post_calc_year_expand","text":"minimum time_available filled front first available year minimum time_available greater time_start.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map the available raw data years over the given period — post_calc_year_expand","text":"","code":"if (FALSE) { process_calc_year_expand(2018, 2022, \"year\", c(2017, 2020, 2021)) process_calc_year_expand(2018, 2022, \"year\", c(2020, 2021)) }"},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"Load county sf object — process_counties","title":"Load county sf object — process_counties","text":"Load county sf object","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load county sf object — process_counties","text":"","code":"process_counties(   year = 2020,   exclude = c(\"02\", \"15\", \"60\", \"66\", \"68\", \"69\", \"72\", \"78\") )"},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load county sf object — process_counties","text":"year integer(1). Year county shapefile. exclude character. State FIPS codes exclude. Default c(\"02\", \"15\", \"60\", \"66\", \"68\", \"69\", \"72\", \"78\").","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load county sf object — process_counties","text":"sf object","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Process atmospheric composition data by chunks (v2) — process_geos_bulk","title":"Process atmospheric composition data by chunks (v2) — process_geos_bulk","text":"Returning single SpatRasterDataset object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process atmospheric composition data by chunks (v2) — process_geos_bulk","text":"","code":"process_geos_bulk(path = NULL, date = c(\"2018-01-01\", \"2018-01-01\"), ...)"},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process atmospheric composition data by chunks (v2) — process_geos_bulk","text":"path character(1). Directory downloaded netCDF (.nc4) files. netCDF file paths. date character(2). length 10. Format \"YYYY-MM-DD\". ... Arguments passed terra::rast.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process atmospheric composition data by chunks (v2) — process_geos_bulk","text":"SpatRaster object;","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process atmospheric composition data by chunks (v2) — process_geos_bulk","text":"Layer names returned SpatRaster object contain variable, pressure level, date Reference duration: 1 day summary, layers: 115 seconds Superseded calc_geos_strict.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process atmospheric composition data by chunks (v2) — process_geos_bulk","text":"Mitchell Manware, Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Process NARR2 Data — process_narr2","title":"Process NARR2 Data — process_narr2","text":"function processes NARR2 data based specified parameters.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process NARR2 Data — process_narr2","text":"","code":"process_narr2(   date = c(\"2023-09-01\", \"2023-09-01\"),   variable = NULL,   path = NULL,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process NARR2 Data — process_narr2","text":"date character vector specifying start end dates format \"YYYY-MM-DD\". variable character vector specifying variable interest. path character vector specifying path data files. ... Additional parameters passed functions.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process NARR2 Data — process_narr2","text":"SpatRaster object containing processed NARR2 data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process NARR2 Data — process_narr2","text":"function performs following steps: Sets directory path. Checks null parameters. Identifies file paths based specified variable. Generates date sequence based specified start end dates. Filters file paths include dates interest. Sets search abbreviation target variable. Imports processes data file path. Subsets data include dates interest. Returns processed data SpatRaster object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process NARR2 Data — process_narr2","text":"","code":"# Process NARR2 data for the variable \"PRATE\" from # September 1, 2023 to September 1, 2023 if (FALSE) { data <-   process_narr2(     date = c(\"2023-09-01\", \"2023-09-01\"),     variable = \"PRATE\",     path = \"/path/to/data\"   ) }"},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read AQS data — read_locs","title":"Read AQS data — read_locs","text":"Read AQS data","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read AQS data — read_locs","text":"","code":"read_locs(fun_aqs = amadeus::process_aqs, export = FALSE, ...)"},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read AQS data — read_locs","text":"fun_aqs function import AQS data. Default amadeus::process_aqs export Export file qs. Default FALSE. ... Passed arguments fun_aqs","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read AQS data — read_locs","text":"Depending fun_aqs specification.","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Read paths from a directory with a specific file extension — read_paths","title":"Read paths from a directory with a specific file extension — read_paths","text":"Read paths directory specific file extension","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read paths from a directory with a specific file extension — read_paths","text":"","code":"read_paths(   path,   extension = \".hdf\",   target_dates = c(\"2020-01-01\", \"2020-01-15\"),   julian = FALSE )"},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read paths from a directory with a specific file extension — read_paths","text":"path directory path read paths. extension file extension match. Defaults \".hdf\". target_dates character vector length 2 containing start end dates. julian logical(1). TRUE, dates Julian format.","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read paths from a directory with a specific file extension — read_paths","text":"character vector containing full paths matching files.","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read paths from a directory with a specific file extension — read_paths","text":"","code":"if (FALSE) { # Read paths from a directory with default extension read_paths(\"/path/to/directory\")  # Read paths from a directory with custom extension read_paths(\"/path/to/directory\", \".txt\") }"},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce and merge a list of data tables — reduce_merge","title":"Reduce and merge a list of data tables — reduce_merge","text":"function takes list data tables merges together using specified columns. uses merge.data.table function data.table package perform merge.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce and merge a list of data tables — reduce_merge","text":"","code":"reduce_merge(list_in, by = c(\"site_id\", \"time\"), all.x = TRUE, all.y = FALSE)"},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce and merge a list of data tables — reduce_merge","text":"list_in list data tables merged. columns merge data tables . .x logical(1). Keeping rows first input. .y logical(1). Keeping rows second input.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce and merge a list of data tables — reduce_merge","text":"merged data table.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce and merge a list of data tables — reduce_merge","text":"","code":"if (FALSE) { # Create example data tables dt1 <- data.table(a = 1:3, b = 4:6) dt2 <- data.table(a = 2:4, c = 7:9) dt3 <- data.table(a = 3:5, d = 10:12)  # Merge the data tables reduce_merge(list(dt1, dt2, dt3), by = \"a\") }"},{"path":"https://niehs.github.io/beethoven/reference/search_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Search package functions — search_function","title":"Search package functions — search_function","text":"Search package functions","code":""},{"path":"https://niehs.github.io/beethoven/reference/search_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search package functions — search_function","text":"","code":"search_function(package, search)"},{"path":"https://niehs.github.io/beethoven/reference/search_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search package functions — search_function","text":"package character(1). Package name. search character(1). Search term.","code":""},{"path":"https://niehs.github.io/beethoven/reference/search_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search package functions — search_function","text":"character vector containing matching function names.","code":""},{"path":"https://niehs.github.io/beethoven/reference/search_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search package functions — search_function","text":"","code":"# Search for functions in the `amadeus` package if (FALSE) { search_function(\"amadeus\", \"process_\") }"},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Set arguments for the calculation process — set_args_calc","title":"Set arguments for the calculation process — set_args_calc","text":"function sets arguments calculation process. takes several parameters including site ID, time ID, time period, extent, user email, export path, input path.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set arguments for the calculation process — set_args_calc","text":"","code":"set_args_calc(   char_siteid = \"site_id\",   char_timeid = \"time\",   char_period = c(\"2018-01-01\", \"2022-10-31\"),   num_extent = c(-126, -62, 22, 52),   char_user_email = paste0(Sys.getenv(\"USER\"), \"@nih.gov\"),   path_export = \"inst/targets/punchcard_calc.qs\",   path_input = \"input\" )"},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set arguments for the calculation process — set_args_calc","text":"char_siteid Character string specifying site ID. Default \"site_id\". char_timeid Character string specifying time ID. Default \"time\". char_period Character vector specifying time period. Default c(\"2018-01-01\", \"2022-10-31\"). path_export Character string specifying export path. Default \"inst/targets/punchcard_calc.qs\". NULL, list object \"arglist_common\" exported global environment returns list arguments calculation process. path_input Character string specifying input path. Default \"input\". extent Numeric vector specifying extent. Default c(-126, -62, 22, 52). user_email Character string specifying user email. Default current user's email.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set arguments for the calculation process — set_args_calc","text":"list arguments calculation process.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set arguments for the calculation process — set_args_calc","text":"path_input contain following subdirectories: modis/raw/61/MOD11A1 modis/raw/61/MOD06_L2 modis/raw/61/MOD09GA modis/raw/61/MCD19A2 modis/raw/61/MOD13A2 modis/raw/5000/VNP46A2 aqs geos/aqc_tavg_1hr_g1440x721_v1 geos/chm_tavg_1hr_g1440x721_v1 HMS_Smoke/data gmted nei narr HMS_Smoke koppen_geiger ecoregions sedac_groads sedac_population","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Set resource management for SLURM — set_slurm_resource","title":"Set resource management for SLURM — set_slurm_resource","text":"Set resource management SLURM","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set resource management for SLURM — set_slurm_resource","text":"","code":"set_slurm_resource(   template_file = \"inst/targets/template_slurm.tmpl\",   partition = \"geo\",   ncpus = 2L,   ntasks = 2L,   memory = 8,   user_email,   error_log = \"slurm_error.log\" )"},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set resource management for SLURM — set_slurm_resource","text":"template_file SLURM job submission shell template path. partition character(1). Name partition. Default \"geo\" ncpus integer(1). Number CPU cores assigned task. ntasks integer(1). Number tasks submit. memory integer(1). Specifically odds 2*x GB. user_email character(1). User email address. error_log character(1). Error log file name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set resource management for SLURM — set_slurm_resource","text":"list resources tar_resources","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set resource management for SLURM — set_slurm_resource","text":"function designed used tar_resources. Suggested number ncpus 1 typical multicore R tasks.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set resource management for SLURM — set_slurm_resource","text":"Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/vis_rset.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the spatio-temporal cross-validation index — vis_rset","title":"Visualize the spatio-temporal cross-validation index — vis_rset","text":"Visualize spatio-temporal cross-validation index","code":""},{"path":"https://niehs.github.io/beethoven/reference/vis_rset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the spatio-temporal cross-validation index — vis_rset","text":"","code":"vis_rset(rsplit, angle = 60)"},{"path":"https://niehs.github.io/beethoven/reference/vis_rset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the spatio-temporal cross-validation index — vis_rset","text":"rsplit rsample::manual_rset() object. angle numeric(1). Viewing angle 3D plot.","code":""},{"path":"https://niehs.github.io/beethoven/reference/vis_rset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the spatio-temporal cross-validation index — vis_rset","text":"None. plot generated.","code":""},{"path":[]}]
