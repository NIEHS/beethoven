[{"path":"https://niehs.github.io/beethoven/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 NRTAPmodel authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://niehs.github.io/beethoven/articles/prediction_points.html","id":"objective","dir":"Articles","previous_headings":"","what":"Objective","title":"Generate prediction points","text":"vignette demonstrate prediction grid points 1-km resolution generated polygon data mainland US terra package.","code":""},{"path":"https://niehs.github.io/beethoven/articles/prediction_points.html","id":"strategy","dir":"Articles","previous_headings":"","what":"Strategy","title":"Generate prediction points","text":"set upper left lower right corners make regular grid points 1,000 meter interval. EPSG:5070, Conus Albers equal area projection, used throughout vignette.","code":"usmain <- tigris::states(progress_bar = FALSE) exclude <- c(\"02\", \"15\", \"60\", \"66\", \"68\", \"69\", \"72\", \"78\") usmain <- usmain[!usmain$STATEFP %in% exclude, ] usmain <- terra::vect(usmain) usmain <- terra::aggregate(usmain) usmain <- terra::project(usmain, \"EPSG:5070\") plot(usmain)"},{"path":"https://niehs.github.io/beethoven/articles/prediction_points.html","id":"generate","dir":"Articles","previous_headings":"","what":"Generate","title":"Generate prediction points","text":"Regular random points can generated extent polygon object terra::spatSample() sf::st_sample(). faster way generating regular points leverage raster object, cells organized regular grid. code block generates 1-km resolution grid points following steps: Identify corners generate rectangular extent (.e., SpatExtent object terra::ext()) Create SpatRaster object fixed resolution coordinate system (case, EPSG:5070) Assign value void raster Crop raster object mainland US polygon Convert cropped raster points (SpatVector object) Convert SpatVector object three-column data.frame object Save data.frame object step 6 RDS file Steps 6 7 reduce file size substantially data data.frame step 6 numeric type. means data can compressed efficiently. map 10-km grid points mainland US faster rendering. actual 1-km result look denser.","code":"corner_ul <- c(-2.40, 3.26) * 1e6 corner_lr <- c(2.40, 0.12) * 1e6  corners <- c(corner_ul, corner_lr) # reorganize xmin, ymin, xmax, ymax, which are ll, ur form corners_re <- corners[c(1, 3, 4, 2)] names(corners_re) <- c(\"xmin\", \"xmax\", \"ymin\", \"ymax\") corners_ext <- terra::ext(corners_re) corners_ras <-   terra::rast(     corners_ext,     resolution = c(1000L, 1000L),     crs = \"EPSG:5070\"   )  terra::values(corners_ras) <- 1L corners_ras_sub <-   terra::crop(     corners_ras,     usmain,     snap = \"out\",     mask = TRUE   )  corners_pnts <- terra::as.points(corners_ras_sub) corners_pnts_df <- as.data.frame(corners_pnts, geom = \"XY\") corners_pnts_df$site_id <- seq(1, nrow(corners_pnts_df)) names(corners_pnts_df)[2:3] <- c(\"lon\", \"lat\") corners_pnts_df <- corners_pnts_df[, c(\"site_id\", \"lon\", \"lat\")] saveRDS(   corners_pnts_df,   file = \"./input/prediction_grid.rds\",   compress = \"xz\" ) plot(   corners_pnts10,   cex = 0.1,   main = \"10-km grid points in the mainland US\" )"},{"path":"https://niehs.github.io/beethoven/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kyle Messier. Author, maintainer. Insang Song. Author, contributor. Eva Marques. Author, contributor. Ranadeep Daw. Author, contributor. Mitchell Manware. Author, contributor. Daniel Zilber. Author, contributor. Anisha Singh. Author, contributor. Lara Clark. Author, contributor. Cavin Ward-Caviness. Author, contributor. Mariana Alifa Kassien. Author, contributor.","code":""},{"path":"https://niehs.github.io/beethoven/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Messier K, Song , Marques E, Daw R, Manware M, Zilber D, Singh , Clark L, Ward-Caviness C, Alifa Kassien M (2025). beethoven: Building Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model air quality. R package version 0.4.7, https://github.com/NIEHS/beethoven.","code":"@Manual{,   title = {beethoven: Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality},   author = {Kyle Messier and Insang Song and Eva Marques and Ranadeep Daw and Mitchell Manware and Daniel Zilber and Anisha Singh and Lara Clark and Cavin Ward-Caviness and Mariana {Alifa Kassien}},   year = {2025},   note = {R package version 0.4.7},   url = {https://github.com/NIEHS/beethoven}, }"},{"path":"https://niehs.github.io/beethoven/index.html","id":"building-an-extensible-reproducible-test-driven-harmonized-open-source-versioned-ensemble-model-for-air-quality-","dir":"","previous_headings":"","what":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"Group Project Spatiotemporal Exposures Toxicology group help friends üòÉ ü§† üåé","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"","code":"remotes::install_github(\"NIEHS/beethoven\")"},{"path":"https://niehs.github.io/beethoven/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"beethoven targets reproducible analysis pipeline following workflow. Version 0.4.4 beethoven stable targets downloading data files, calculating features AQS sites, merging base learner-ready data.table (dt_feat_calc_xyt). Ongoing changes relate calculating features prediction grid, computationally managing prediction grid, base learner hyperparameter tuning, meta learner function development.","code":"targets::tar_visnetwork()"},{"path":"https://niehs.github.io/beethoven/index.html","id":"organization","dir":"","previous_headings":"","what":"Organization","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":", describe structure repository, important files, targets object naming conventions.","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"folder-structure","dir":"","previous_headings":"Organization","what":"Folder Structure","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"R/ beethoven functions stored. ‚Äú.R‚Äù files folder (ie. targets helpers, post-processing, model fitting functions). targets/ sub-directory within inst/ contains pipeline files (ie. ‚Äútargets_aqs.R‚Äù). files declare targets::tar_target objects constitute beethoven pipeline. testthat.R created maintained testthat, edited manually. container/ stores definition files build scripts build covariate- model-specific Apptainer container images (container_covariates.def container_models.def). man/ contains function documentation files (‚Äú.Rd‚Äù) roxygen2 package. files edited manually. vignettes/ contains ‚Äú.Rmd‚Äù narrative text code files. rendered pkgdown Articles section beethoven webpage. .github/workflows/ hidden directory stores GitHub CI/CD ‚Äúyaml‚Äù files. tools/ dedicated educational demonstration material (e.g.¬†Rshiny), excluded package build.","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"important-files","dir":"","previous_headings":"Organization","what":"Important Files","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"controller_* Ensure local controllers request CPUs available machine high performance system. #SBATCH --partition Utilization NVIDIA GPUs (within glue::glue command) --bind /USER_PATH_TO_INPUT/input:/input (within glue::glue command) _targets.yaml created updated running targets::tar_make edited manually. #SBATCH --mail-user #SBATCH --partition #SBATCH --mem #SBATCH --cpus-per-task --bind /USER_PATH_TO_INPUT/input:/input --bind /USER_PATH_TO_SLURM/slurm:/USER_PATH_TO_SLURM/slurm","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/index.html","id":"user-settings","dir":"","previous_headings":"Organization > Running beethoven Pipeline","what":"User settings","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"beethoven pipeline configured SLURM defaults NIEHS HPC settings. adapting settings users‚Äô environment, consult documentation platform edit requested resources stage-specific run files (/inst/scripts/) (lines 3-11) _targets.R (lines 41-45; individual crew crew.cluster controller workers).","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"critical-targets","dir":"","previous_headings":"Organization > Running beethoven Pipeline","what":"Critical targets","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"5 ‚Äúcritical‚Äù targets users may want change run beethoven. Controls time-related targets entire pipeline. target needs changed update pipeline new temopral range. Month year specific arguments derived time range defined chr_daterange. Sets file path user‚Äôs NASA Earthdata account credentials. credentials expire ~90 day intervals therefore must updated regularly. file path MOD06 links file. links must manually downloaded per amadeus::download_modis function. links stored CSV file read function. new file links must updated match new date range. file path input directory. target controls raw data files downloaded imported . file path must mounted container run time run.sh script. Controls size temporal splits. Splitting temporal range smaller chunks allows parallel processing across multiple workers. also allows dispatching new dynamic branches temporal range updated.","code":""},{"path":"https://niehs.github.io/beethoven/index.html","id":"apptainer","dir":"","previous_headings":"Organization > Running beethoven Pipeline","what":"Apptainer","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"Current implementation beethoven utilizes Apptainer images run pipeline consistent package versions custom installations. Users must build images runnning beethoven. [!NOTE] .sif files omitted GitHub due size (>5 Gb )","code":"cd container/ # must be working in the `container/` directory sh build_container_covariates.sh # build \"covariates\" stage image sh build_container_models.sh # build \"models\" image mv *sif ../ # move images to `beethoven/` root directory"},{"path":"https://niehs.github.io/beethoven/index.html","id":"run","dir":"","previous_headings":"Organization > Running beethoven Pipeline","what":"Run","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"switching back project root directory, users can run pipeline run.sh shell script. following lines /inst/scripts/run_*.sh must updated user-specific settings running pipeline configured, pipeline can run SLRUM batch job. SLURM batch job can also submitted R session batch helper function.","code":"#SBATCH --mail-user=[USER_EMAIL]      # email address for job notifications #SBATCH --partition=[PARTITION_NAME]  # HPC partition to run on #SBATCH --mem=[###G]                  # Total memory for the job #SBATCH --cpus-per-task=[###]         # Total CPUs for the job ...   --bind [USER_INPUT_DIRECTORY]/input:/input \\ ...   --bind [USER_SYSTEM_PATH/munge]:/run/munge \\   --bind [USER_SYSTEM_PATH/slurm]:[USER_SYSTEM_PATH/slurm] \\ cd ../ # assuming still in the `container/` directory sbatch run.sh source(\"R/helpers.R\") batch()"},{"path":"https://niehs.github.io/beethoven/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Building an Extensible, rEproducible, Test-driven, Harmonized, Open-source, Versioned, ENsemble model for air quality","text":"Developer‚Äôs Guide provides detailed instructions develop update beethoven settings individual targets objecdts contribute developments modifications, open Pull request dev branch detailed description proposed changes. Pull requests must pass status checks, approved rejected beethoven‚Äôs authors. Utilize Issues notify authors bugs, questions, recommendations. Identify issue appropriate label help ensure timely response.","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Time Column ‚Äî add_time_col","title":"Add Time Column ‚Äî add_time_col","text":"function adds time column data frame.","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Time Column ‚Äî add_time_col","text":"","code":"add_time_col(df, time_value, time_id = \"time\")"},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Time Column ‚Äî add_time_col","text":"df data frame time column added. time_value value assigned time column. time_id name time column (default \"time\").","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Time Column ‚Äî add_time_col","text":"data frame added time column.","code":""},{"path":"https://niehs.github.io/beethoven/reference/add_time_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Time Column ‚Äî add_time_col","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(x = 1:5, y = letters[1:5]) add_time_col(df, \"2022-01-01\") } # }"},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Append Predecessors ‚Äî append_predecessors","title":"Append Predecessors ‚Äî append_predecessors","text":"function appends predecessors existing object creates new object none exists.","code":""},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append Predecessors ‚Äî append_predecessors","text":"","code":"append_predecessors(   path_qs = \"output/qs\",   period_new = NULL,   input_new = NULL,   nthreads = 8L )"},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append Predecessors ‚Äî append_predecessors","text":"path_qs path predecessors stored. period_new new period appended. input_new new input object appended. nthreads number threads used.","code":""},{"path":"https://niehs.github.io/beethoven/reference/append_predecessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append Predecessors ‚Äî append_predecessors","text":"existing predecessors found, function saves new input object returns name saved file. existing predecessors found, function appends new input object existing ones returns combined object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/assign_learner_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle cross-validation mode for each learner type ‚Äî assign_learner_cv","title":"Shuffle cross-validation mode for each learner type ‚Äî assign_learner_cv","text":"Shuffle cross-validation mode learner type","code":""},{"path":"https://niehs.github.io/beethoven/reference/assign_learner_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle cross-validation mode for each learner type ‚Äî assign_learner_cv","text":"","code":"assign_learner_cv(   learner = c(\"lgb\", \"mlp\", \"elnet\"),   cv_mode = c(\"spatiotemporal\", \"spatial\", \"temporal\"),   num_models = 100L,   num_device = ifelse(torch::cuda_device_count() > 1, 2, 1),   crs = 5070L,   cellsize = 100000L,   balance = FALSE )"},{"path":"https://niehs.github.io/beethoven/reference/assign_learner_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle cross-validation mode for each learner type ‚Äî assign_learner_cv","text":"learner character(1). base learner used. Default \"mlp\". Available options \"mlp\", \"lgb\", \"elnet\". cv_mode character(1). cross-validation mode used. Default \"spatiotemporal\". Available options \"spatiotemporal\", \"spatial\", \"temporal\". num_models integer(1). number repetitions cv_mode. num_device integer(1). number CUDA devices used. device assigned eligible learner (.e., lgb, mlp). crs Coordinate reference system sf style. Default 5070L Albers Equal Area Projected cellsize cellsize cross-validation spatial blocks. crs units. Default 100km balance logical(1). TRUE, number CUDA devices equally distributed based number eligible devices.","code":""},{"path":"https://niehs.github.io/beethoven/reference/assign_learner_cv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle cross-validation mode for each learner type ‚Äî assign_learner_cv","text":"data frame three columns: learner, cv_mode, device.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine prediction values from base learners ‚Äî attach_pred","title":"Combine prediction values from base learners ‚Äî attach_pred","text":"function combines outcome data (observations) prediction values base learner.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine prediction values from base learners ‚Äî attach_pred","text":"","code":"attach_pred(   data,   pred,   position = 1,   target_cols = c(\"site_id\", \"time\", \"Event.Type\", \"lon\", \"lat\"),   yvar = \"Arithmetic.Mean\" )"},{"path":"https://niehs.github.io/beethoven/reference/attach_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine prediction values from base learners ‚Äî attach_pred","text":"data data.frame(1). Full data. pred list(1). List base learner prediction values. position numeric(1). Position prediction values list pred. Default 1. target_cols characters(1). Columns retain full data.frame. yvar character(1). Outcome variable name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine prediction values from base learners ‚Äî attach_pred","text":"data.frame object, including target columns data predictions base learner.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach XY coordinates to a data frame ‚Äî attach_xy","title":"Attach XY coordinates to a data frame ‚Äî attach_xy","text":"function attaches XY coordinates data frame based spatial object containing coordinates. performs left join operation match coordinates corresponding locations data frame.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach XY coordinates to a data frame ‚Äî attach_xy","text":"","code":"attach_xy(data_full, data_sf, locs_id = \"site_id\", time_id = \"time\")"},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach XY coordinates to a data frame ‚Äî attach_xy","text":"data_full full data frame XY coordinates attached. data_sf spatial object containing XY coordinates. locs_id column name spatial object represents location identifier. time_id column name data frame represents time identifier.","code":""},{"path":"https://niehs.github.io/beethoven/reference/attach_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach XY coordinates to a data frame ‚Äî attach_xy","text":"data frame XY coordinates attached.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":null,"dir":"Reference","previous_headings":"","what":"Process atmospheric composition data by chunks ‚Äî calc_geos_strict","title":"Process atmospheric composition data by chunks ‚Äî calc_geos_strict","text":"Returning single SpatRasterDataset object. Removed tapp performance; impose strict assumption missing values","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process atmospheric composition data by chunks ‚Äî calc_geos_strict","text":"","code":"calc_geos_strict(   path = NULL,   date = c(\"2018-01-01\", \"2018-01-01\"),   locs = NULL,   locs_id = NULL,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process atmospheric composition data by chunks ‚Äî calc_geos_strict","text":"path character(1). Directory downloaded netCDF (.nc4) files. netCDF file paths. date character(2). length 10. Format \"YYYY-MM-DD\". locs Locations extract. locs_id character(1). Location identifier. ... Arguments passed terra::rast.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process atmospheric composition data by chunks ‚Äî calc_geos_strict","text":"SpatRaster object;","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process atmospheric composition data by chunks ‚Äî calc_geos_strict","text":"Layer names returned SpatRaster object contain variable, pressure level, date Reference duration: 1 day summary, layers: 106 seconds hard-coded subsets subdataset selection","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_geos_strict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process atmospheric composition data by chunks ‚Äî calc_geos_strict","text":"Mitchell Manware, Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":null,"dir":"Reference","previous_headings":"","what":"Reflown gmted processing ‚Äî calc_gmted_direct","title":"Reflown gmted processing ‚Äî calc_gmted_direct","text":"Reflown gmted processing","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reflown gmted processing ‚Äî calc_gmted_direct","text":"","code":"calc_gmted_direct(   variable = NULL,   path = NULL,   locs = NULL,   locs_id = NULL,   win = c(-126, -62, 22, 52),   radius = 0,   fun = \"mean\",   ... )"},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reflown gmted processing ‚Äî calc_gmted_direct","text":"variable character(2). Statistic resolution. path character(1). Directory downloaded GMTED files. locs data.frame/SpatVector/sf. Locations. locs_id character(1). Location identifier. win numeric(4). Window raster. radius numeric(1). Radius extraction. fun character(1). Function apply. ... Additional parameters passed functions.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_gmted_direct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reflown gmted processing ‚Äî calc_gmted_direct","text":"data.frame containing extracted GMTED data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate aggregated values for specified locations ‚Äî calc_narr2","title":"Calculate aggregated values for specified locations ‚Äî calc_narr2","text":"function calculates aggregated values specified locations raster dataset.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate aggregated values for specified locations ‚Äî calc_narr2","text":"","code":"calc_narr2(from, locs, locs_id = NULL, radius = 0, fun = \"mean\", ...)"},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate aggregated values for specified locations ‚Äî calc_narr2","text":"raster dataset extract values. locs data frame containing locations calculate aggregated values. column locs_id value contains unique identifiers location. locs_id optional column name locs data frame contains additional location identifiers. radius radius within include neighboring locations aggregation. Default 0. fun aggregation function use. can character string specifying function name (e.g., \"mean\", \"sum\"), can custom function. Default \"mean\". ... Additional arguments passed aggregation function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calc_narr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate aggregated values for specified locations ‚Äî calc_narr2","text":"data frame containing aggregated values location time point.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatiotemporal covariate calculation ‚Äî calculate","title":"Spatiotemporal covariate calculation ‚Äî calculate","text":"Spatiotemporal covariate calculation","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatiotemporal covariate calculation ‚Äî calculate","text":"","code":"calculate(   domain = NULL,   domain_name = \"year\",   process_function = amadeus::process_covariates,   calc_function = amadeus::calculate_covariates,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatiotemporal covariate calculation ‚Äî calculate","text":"domain vector integer/character/Date. Depending temporal resolution raw datasets. Nullable; NULL, set c(1). domain_name character(1). Name domain. Default \"year\". process_function Raw data processor. Default amadeus::process_covariates calc_function Function calculate covariates. amadeus::calculate_covariates ... Arguments passed process_function calc_function","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatiotemporal covariate calculation ‚Äî calculate","text":"data.table object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate_modis.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate MODIS product covariates in multiple CPU threads ‚Äî calculate_modis","title":"Calculate MODIS product covariates in multiple CPU threads ‚Äî calculate_modis","text":"calculate_modis essentially runs calculate_modis_daily function thread (subprocess). Based daily resolution, day's workload distributed thread. product argument, files processed customized function unique structure /characteristics products considered. nthreads argument carefully selected consideration machine's CPU memory capacities products memory pressure. locs sf object exportable parallel workers.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate_modis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate MODIS product covariates in multiple CPU threads ‚Äî calculate_modis","text":"","code":"calculate_modis(   from = NULL,   locs = NULL,   locs_id = \"site_id\",   radius = c(0L, 1000L, 10000L, 50000L),   preprocess = amadeus::process_modis_merge,   name_covariates = NULL,   subdataset = NULL,   fun_summary = \"mean\",   package_list_add = NULL,   export_list_add = NULL,   max_cells = 3e+07,   geom = FALSE,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/calculate_modis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate MODIS product covariates in multiple CPU threads ‚Äî calculate_modis","text":"character. List paths MODIS/VIIRS files. locs sf/SpatVector object. Unique locs covariates calculated. locs_id character(1). Site identifier. Default \"site_id\" radius numeric. Radii calculate covariates. Default c(0, 1000, 10000, 50000). preprocess function. Function handle HDF files. name_covariates character. Name header covariates. e.g., \"MOD_NDVIF_0_\". calculated covariate names form \"{name_covariates}{zero-padded buffer radius meters}\", e.g., 'MOD_NDVIF_0_50000' 50 km radius circular buffer used calculate mean NDVI value. subdataset Indices, names, search patterns subdatasets. Find detail usage argument notes. fun_summary character function. Function summarize extracted raster values. package_list_add character. vector package names load thread. Note sf, terra, exactextractr, doParallel, parallelly dplyr default packages loaded. export_list_add character. vector object names export thread. minimized spare memory. max_cells integer(1). Maximum number cells read . Higher values expedite processing, increase memory usage. Maximum possible value 2^31 - 1. See exactextractr::exact_extract details. geom FALSE/\"sf\"/\"terra\".. function return geometry? Default FALSE, options geometry \"sf\" \"terra\". coordinate reference system sf SpatVector . ... Arguments passed preprocess.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate_modis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate MODIS product covariates in multiple CPU threads ‚Äî calculate_modis","text":"data.frame SpatVector attribute: attr(., \"dates_dropped\"): Dates insufficient tiles. Note dates mean dates insufficient tiles, dates without available tiles.","code":""},{"path":"https://niehs.github.io/beethoven/reference/calculate_modis.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate MODIS product covariates in multiple CPU threads ‚Äî calculate_modis","text":"Overall, function dependent routines assume file system can handle concurrent access (network) disk multiple processes. File system characteristics, package versions, hardware settings specification can affect processing efficiency. locs expected convertible sf object. sf, SpatVector, class objects converted sf can used. Common arguments preprocess functions date path automatically detected passed function. Please note locs path preprocess functions assumed standard naming convention raw files NASA. argument subdataset proper format depending preprocess function: process_modis_merge(): Regular expression pattern. e.g., \"^LST_\" process_modis_swath(): Subdataset names. e.g., c(\"Cloud_Fraction_Day\", \"Cloud_Fraction_Night\") process_blackmarble(): Subdataset number. e.g., VNP46A2 product, 3L. Dates less 80 percent expected number tiles, determined mode number tiles, removed. Users informed dates insufficient tiles. result data.frame attribute dates insufficient tiles.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/calculate_modis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate MODIS product covariates in multiple CPU threads ‚Äî calculate_modis","text":"","code":"## NOTE: Example is wrapped in `\\dontrun{}` as function requires a large ##       amount of data which is not included in the package. if (FALSE) { # \\dontrun{ locs <- data.frame(lon = -78.8277, lat = 35.95013, id = \"001\") locs <- terra::vect(locs, geom = c(\"lon\", \"lat\"), crs = \"EPSG:4326\") calculate_modis(   from =     list.files(\"./data\", pattern = \"VNP46A2.\", full.names = TRUE),   locs = locs,   locs_id = \"site_id\",   radius = c(0L, 1000L),   preprocess = process_modis_merge,   name_covariates = \"cloud_fraction_0\",   subdataset = \"Cloud_Fraction\",   fun_summary = \"mean\" ) } # }"},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate manual rset object from spatiotemporal cross-validation indices ‚Äî convert_cv_index_rset","title":"Generate manual rset object from spatiotemporal cross-validation indices ‚Äî convert_cv_index_rset","text":"Generate manual rset object spatiotemporal cross-validation indices","code":""},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate manual rset object from spatiotemporal cross-validation indices ‚Äî convert_cv_index_rset","text":"","code":"convert_cv_index_rset(   cvindex,   data,   ref_list = attr(cvindex, \"ref_list\"),   cv_mode = c(\"spatiotemporal\", \"spatial\", \"temporal\") )"},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate manual rset object from spatiotemporal cross-validation indices ‚Äî convert_cv_index_rset","text":"cvindex One : integer row indices id_out rset object. List integer row indices stored elements named analysis assessment. data data.frame object cvindex used create rset object ref_list List custom reference group indices. Default attr(cvindex, \"ref_list\"), assumed cvindex contains list attribute named \"ref_list\". NULL, used reference instead max(cvindex). cv_mode character(1). Spatiotemporal cross-validation indexing method label.","code":""},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate manual rset object from spatiotemporal cross-validation indices ‚Äî convert_cv_index_rset","text":"rset object rsample package. tibble list column training-test data.frames column labels.","code":""},{"path":"https://niehs.github.io/beethoven/reference/convert_cv_index_rset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate manual rset object from spatiotemporal cross-validation indices ‚Äî convert_cv_index_rset","text":"Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate code coverage of the beethoven package with the container_models.sif container. ‚Äî cov","title":"Calculate code coverage of the beethoven package with the container_models.sif container. ‚Äî cov","text":"Calculate code coverage beethoven package container_models.sif container.","code":""},{"path":"https://niehs.github.io/beethoven/reference/cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate code coverage of the beethoven package with the container_models.sif container. ‚Äî cov","text":"","code":"cov()"},{"path":"https://niehs.github.io/beethoven/reference/cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate code coverage of the beethoven package with the container_models.sif container. ‚Äî cov","text":"NULL; Prints output code coverage.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Divisors ‚Äî divisor","title":"Get Divisors ‚Äî divisor","text":"Get Divisors","code":""},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Divisors ‚Äî divisor","text":"","code":"divisor(x)"},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Divisors ‚Äî divisor","text":"x integer(1). positive integer.","code":""},{"path":"https://niehs.github.io/beethoven/reference/divisor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Divisors ‚Äî divisor","text":"vector divisors x.","code":""},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Check file status and download if necessary ‚Äî feature_raw_download","title":"Check file status and download if necessary ‚Äî feature_raw_download","text":"Check file status download necessary","code":""},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check file status and download if necessary ‚Äî feature_raw_download","text":"","code":"feature_raw_download(path = NULL, dataset_name = NULL, ...)"},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check file status and download if necessary ‚Äî feature_raw_download","text":"path Path qs file download specifications per dataset. dataset_name character(1). Dataset name. ... Arguments passed amadeus::download_data","code":""},{"path":"https://niehs.github.io/beethoven/reference/feature_raw_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check file status and download if necessary ‚Äî feature_raw_download","text":"logical(1).","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Base learner: tune hyperparameters and retrieve the best model ‚Äî fit_base_learner","title":"Base learner: tune hyperparameters and retrieve the best model ‚Äî fit_base_learner","text":"Multilayer perceptron model different configurations hidden units, dropout, activation, learning rate using brulee tidymodels. proper settings, users can utilize graphics processing units (GPU) speed training process.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_learner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base learner: tune hyperparameters and retrieve the best model ‚Äî fit_base_learner","text":"","code":"fit_base_learner(   rset = NULL,   model = NULL,   tune_grid_size = 10L,   yvar = \"Arithmetic.Mean\",   xvar = NULL,   drop_vars = NULL,   normalize = TRUE,   metric = \"rmse\",   ... )"},{"path":"https://niehs.github.io/beethoven/reference/fit_base_learner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base learner: tune hyperparameters and retrieve the best model ‚Äî fit_base_learner","text":"rset space/time CV set generated beethoven model parsnip model object. Preferably generated switch_model. tune_grid_size numeric(1), finetune grid size. yvar target variable. xvar predictor variables. drop_vars character vector numeric. variables dropped data.frame. normalize logical(1). TRUE, numeric predictors normalized. Default FALSE. metric character(1). metric used selecting best. Must one \"rmse\", \"rsq\", \"mae\". Default = \"rmse\" ... Additional arguments passed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_learner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Base learner: tune hyperparameters and retrieve the best model ‚Äî fit_base_learner","text":"fitted workflow.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_learner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base learner: tune hyperparameters and retrieve the best model ‚Äî fit_base_learner","text":"LightGBM model fitted defined rate (r_subsample) input dataset grid Bayesian optimization search. proper settings, users can utilize graphics processing units (GPU) speed training process. XGBoost model fitted defined rate (r_subsample) input dataset grid Bayesian optimization search. proper settings, users can utilize graphics processing units (GPU) speed training process. Elastic net model fitted defined rate (r_subsample) input dataset grid search Bayesian optimization. MLP: Hyperparameters hidden_units, dropout, activation, learn_rate tuned. tune_mode = \"grid\", users can modify learn_rate explicitly, hyperparameters predefined (56 combinations per learn_rate mlp). XGBoost: Hyperparameters mtry, ntrees, learn_rate tuned. tune_mode = \"grid\", users can modify learn_rate explicitly, hyperparameters predefined (30 combinations per learn_rate). LightGBM: Hyperparameters mtry, ntrees, learn_rate tuned. tune_mode = \"grid\", users can modify learn_rate explicitly, hyperparameters predefined (30 combinations per learn_rate). Elastic net: Hyperparameters mixture penalty tuned. Tuning performed based random grid search (size = 10).","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_learner.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Base learner: tune hyperparameters and retrieve the best model ‚Äî fit_base_learner","text":"tune package 1.2.0 higher. brulee, xgboost, lightgbm installed GPU support. Grid search activated function, regardless parts' description.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_tune.html","id":null,"dir":"Reference","previous_headings":"","what":"Tune base learner ‚Äî fit_base_tune","title":"Tune base learner ‚Äî fit_base_tune","text":"Tune base learner","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_tune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tune base learner ‚Äî fit_base_tune","text":"","code":"fit_base_tune(   recipe,   model,   resample,   tune_mode = c(\"bayes\", \"grid\"),   grid = NULL,   iter_bayes = 10L,   trim_resamples = TRUE,   return_best = TRUE,   workflow = TRUE,   data_full = NULL,   metric = \"rmse\" )"},{"path":"https://niehs.github.io/beethoven/reference/fit_base_tune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tune base learner ‚Äî fit_base_tune","text":"recipe recipe object. model model object. resample resample object. expected generated subsamples. tune_mode character(1). Hyperparameter tuning mode. Default \"bayes\", \"grid\" acceptable. grid grid object hyperparameter tuning. trim_resamples logical(1). Default TRUE, replaces actual data.frames splits column tune_results object NA. return_best logical(1). TRUE, best tuned model returned. workflow logical(1). TRUE, best fit model workflow returned. data_full full data frame used prediction. metric character(1). metric used selecting best. Must one \"rmse\", \"rsq\", \"mae\". Default = \"rmse\"","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_base_tune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tune base learner ‚Äî fit_base_tune","text":"List 3: base_prediction: data.frame best model prediction. base_parameter: tune_results object best model. best_performance: data.frame performance metrics. includes RMSE, MAPE, R-squared, MAE tuned models.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_meta_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit meta learner ‚Äî fit_meta_learner","title":"Fit meta learner ‚Äî fit_meta_learner","text":"function subsets full data column subsamples (rate=50%) optimal hyperparameter search performed based spatiotemporal cross-validation schemes. version 0.4.5, users can define metric used selecting best hyperparameter set (default = \"rmse\").","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_meta_learner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit meta learner ‚Äî fit_meta_learner","text":"","code":"fit_meta_learner(   data,   c_subsample = 0.5,   r_subsample = 1,   yvar = \"Arithmetic.Mean\",   target_cols = c(\"site_id\", \"time\", \"lon\", \"lat\", \"Event.Type\"),   args_generate_cv = list(),   tune_iter = 50L,   trim_resamples = FALSE,   return_best = TRUE,   metric = \"rmse\" )"},{"path":"https://niehs.github.io/beethoven/reference/fit_meta_learner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit meta learner ‚Äî fit_meta_learner","text":"data data.frame. Full data.frame base learner predictions AQS spatiotemporal identifiers. attach_pred. c_subsample numeric(1). Rate column resampling. Default 0.5. r_subsample numeric(1). proportion rows used. Default 1.0, uses full dataset setting required balance groups generated make_subdata yvar character(1). Outcome variable name target_cols characters(1). Columns data retained column resampling. Default c(\"site_id\", \"time\", \"Event.Type\", \"lon\", \"lat\"). args_generate_cv List arguments passed switch_generate_cv_rset function. tune_iter integer(1). Bayesian optimization iterations. Default 50. trim_resamples logical(1). Default TRUE, replaces actual data.frames splits column tune_results object NA. Passed fit_base_tune. return_best logical(1). TRUE, best tuned model returned. Passed fit_base_tune. metric character(1). metric used selecting best. Must one \"rmse\", \"rsq\", \"mae\". Default = \"rmse\". Passed fit_base_tune.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fit_meta_learner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit meta learner ‚Äî fit_meta_learner","text":"List 3, including best-fit model, best hyperparameters, performance records tune::tune_bayes(). Note meta learner function returns best-fit model, predicted values.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/fl_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the first and last elements of a list ‚Äî fl_dates","title":"Extract the first and last elements of a list ‚Äî fl_dates","text":"Extract first last elements list","code":""},{"path":"https://niehs.github.io/beethoven/reference/fl_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the first and last elements of a list ‚Äî fl_dates","text":"","code":"fl_dates(dates)"},{"path":"https://niehs.github.io/beethoven/reference/fl_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the first and last elements of a list ‚Äî fl_dates","text":"dates list. list dates.","code":""},{"path":"https://niehs.github.io/beethoven/reference/fl_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the first and last elements of a list ‚Äî fl_dates","text":"character vector first last dates list.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_sp.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare spatial and spatiotemporal cross validation sets ‚Äî generate_cv_index_sp","title":"Prepare spatial and spatiotemporal cross validation sets ‚Äî generate_cv_index_sp","text":"Prepare spatial spatiotemporal cross validation sets","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_sp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare spatial and spatiotemporal cross validation sets ‚Äî generate_cv_index_sp","text":"","code":"generate_cv_index_sp(data, target_cols = c(\"lon\", \"lat\"), ...)"},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_sp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare spatial and spatiotemporal cross validation sets ‚Äî generate_cv_index_sp","text":"data data.table X, Y, time information. target_cols character(3). Names columns X, Y. Default c(\"lon\", \"lat\"). passed sf::st_as_sf subsequently generate spatial cross-validation indices using spatialsample::spatial_block_cv. ... Additional arguments passed patialsample::spatial_block_cv.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_sp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare spatial and spatiotemporal cross validation sets ‚Äî generate_cv_index_sp","text":"list numeric vectors - --sample row indices numeric vector --sample indices.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_spt.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate spatio-temporal cross-validation index with spatialsample::spatial_block_cv and year-based temporal folds ‚Äî generate_cv_index_spt","title":"Generate spatio-temporal cross-validation index with spatialsample::spatial_block_cv and year-based temporal folds ‚Äî generate_cv_index_spt","text":"function generates spatio-temporal cross-validation indices v spatial blocks year-based temporal folds. spatial blocks generated spatialsample::spatial_block_cv function, temporal folds generated based years availble data$time. Total number folds equal v * length(unique(substr(data$time, 1, 4))).","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_spt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate spatio-temporal cross-validation index with spatialsample::spatial_block_cv and year-based temporal folds ‚Äî generate_cv_index_spt","text":"","code":"generate_cv_index_spt(   data,   crs = NULL,   cellsize = NULL,   locs_id = \"site_id\",   coords = c(\"lon\", \"lat\"),   v = 10L,   time_id = \"time\" )"},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_spt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate spatio-temporal cross-validation index with spatialsample::spatial_block_cv and year-based temporal folds ‚Äî generate_cv_index_spt","text":"data data.table data.frame id, coords, time columns. crs coordinate reference system (CRS) spatial object cellsize size spatial block meters. Uses crs units locs_id column name data represents location identifier. coords column names spatial object represent XY coordinates. Default c(\"lon\", \"lat\"). v integer(1). number partitions resampling. time_id column name data represents time values.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate temporal cross-validation index ‚Äî generate_cv_index_ts","title":"Generate temporal cross-validation index ‚Äî generate_cv_index_ts","text":"Generate temporal cross-validation index","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate temporal cross-validation index ‚Äî generate_cv_index_ts","text":"","code":"generate_cv_index_ts(data, time_col = \"time\", cv_fold = 10L, window = 14L)"},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate temporal cross-validation index ‚Äî generate_cv_index_ts","text":"data data.table X, Y, time information. time_col character(1). Field name time information. cv_fold integer(1). Number cross-validation folds. window integer(1). Window size fold. Simply meaning overlaps folds. Unit base unit temporal values stored time_col. Window size put .difftime function, half (odd, rounded number + 1 applied) used overlaps middle folds.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate temporal cross-validation index ‚Äî generate_cv_index_ts","text":"List numeric vector --sample indices.","code":""},{"path":"https://niehs.github.io/beethoven/reference/generate_cv_index_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate temporal cross-validation index ‚Äî generate_cv_index_ts","text":"","code":"data <- data.frame(  time = seq.Date(from = as.Date(\"2021-01-01\"), by = \"day\", length.out = 100),  value = rnorm(100) ) rset_ts <-   generate_cv_index_ts(data, time_col = \"time\", cv_fold = 10, window = 14)"},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute missing values and attach lagged features ‚Äî impute_all","title":"Impute missing values and attach lagged features ‚Äî impute_all","text":"Impute missing values attach lagged features","code":""},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute missing values and attach lagged features ‚Äî impute_all","text":"","code":"impute_all(   dt,   period,   nthreads_dt = 32L,   nthreads_collapse = 32L,   nthreads_imputation = 32L )"},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute missing values and attach lagged features ‚Äî impute_all","text":"dt input data table imputed. period period lagged features. nthreads_dt number threads used data.table operations. nthreads_collapse number threads used collapse operations. nthreads_imputation number threads used imputation process.","code":""},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute missing values and attach lagged features ‚Äî impute_all","text":"imputed data table lagged features.","code":""},{"path":"https://niehs.github.io/beethoven/reference/impute_all.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Impute missing values and attach lagged features ‚Äî impute_all","text":"function performs imputation given data table replacing missing values imputed values. follows series steps including data cleaning, name cleaning, geoscf column renaming, NDVI 16-day backward filling, zero-variance exclusion, excessive \"true zeros\" exclusion, imputation using missRanger. points discussed sophisticate imputation process: exclusion threshold rates zero observations, might lead significant improvement imputation process especially terms speed accuracy.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects the calculate function with specified arguments. ‚Äî inject_calculate","title":"Injects the calculate function with specified arguments. ‚Äî inject_calculate","text":"function injects calculate function specified arguments, allowing dynamic customization function's behavior.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects the calculate function with specified arguments. ‚Äî inject_calculate","text":"","code":"inject_calculate(covariate, locs, injection)"},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects the calculate function with specified arguments. ‚Äî inject_calculate","text":"covariate character(1). name covariate calculated. locs locations used calculation. injection Additional arguments injected calculate function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects the calculate function with specified arguments. ‚Äî inject_calculate","text":"result calculate function injected arguments.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_calculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Injects the calculate function with specified arguments. ‚Äî inject_calculate","text":"","code":"if (FALSE) { # \\dontrun{ inject_calculate(   locs = my_locs, buffer = 10, domain = my_domain,   injection = list(arg1 = \"value1\", arg2 = \"value2\") ) } # }"},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects geographic information into a data frame ‚Äî inject_geos","title":"Injects geographic information into a data frame ‚Äî inject_geos","text":"function injects geographic information data frame using calc_geos_strict function. injected information includes latitude longitude coordinates based specified locations, location ID column, window range, snapping option.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects geographic information into a data frame ‚Äî inject_geos","text":"","code":"inject_geos(locs, injection, ...)"},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects geographic information into a data frame ‚Äî inject_geos","text":"locs data frame containing locations geographic information needs injected. injection list additional arguments passed calc_geos_strict function. ... Placeholders","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_geos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects geographic information into a data frame ‚Äî inject_geos","text":"modified data frame injected geographic information.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects GMTED data into specified locations ‚Äî inject_gmted","title":"Injects GMTED data into specified locations ‚Äî inject_gmted","text":"function injects GMTED (Global Multi-resolution Terrain Elevation Data) specified locations. calculates GMTED values location within different radii returns merged results.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects GMTED data into specified locations ‚Äî inject_gmted","text":"","code":"inject_gmted(locs, variable, radii, injection)"},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects GMTED data into specified locations ‚Äî inject_gmted","text":"locs data frame/sf/SpatVector containing locations GMTED variables needs calculated variable variable GMTED data needs calculated. radii vector radii GMTED data needs calculated. injection list additional arguments passed calc_gmted_direct function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_gmted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects GMTED data into specified locations ‚Äî inject_gmted","text":"data frame containing merged results GMTED data location within different radii.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects the calculate function with matched arguments. ‚Äî inject_match","title":"Injects the calculate function with matched arguments. ‚Äî inject_match","text":"Injects calculate function matched arguments.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects the calculate function with matched arguments. ‚Äî inject_match","text":"","code":"inject_match(f, args)"},{"path":"https://niehs.github.io/beethoven/reference/inject_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects the calculate function with matched arguments. ‚Äî inject_match","text":"f function. args List arguments attempted injected f.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects the calculate function with matched arguments. ‚Äî inject_match","text":"Injected function evaluation.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects arguments into MODIS/VIIRS data processing function ‚Äî inject_modis","title":"Injects arguments into MODIS/VIIRS data processing function ‚Äî inject_modis","text":"Injects arguments MODIS/VIIRS data processing function","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects arguments into MODIS/VIIRS data processing function ‚Äî inject_modis","text":"","code":"inject_modis(locs, injection)"},{"path":"https://niehs.github.io/beethoven/reference/inject_modis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects arguments into MODIS/VIIRS data processing function ‚Äî inject_modis","text":"locs data frame containing locations MODIS features need calculated. injection List dditional parameters passed calculate_modis_par function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects arguments into MODIS/VIIRS data processing function ‚Äî inject_modis","text":"MODIS/VIIRS feature data.frame.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Injects arguments into MODIS/VIIRS data processing function ‚Äî inject_modis","text":"","code":"if (FALSE) { # \\dontrun{ files <-   c(     \"/downloads/modis/mod06/MOD06_L2.A2022001.0000.061.2022001160000.hdf\",    \"/downloads/modis/mod06/MOD06_L2.A2022001.0005.061.2022001160000.hdf\"   ) my_locs <- data.frame(site_id = 1:2, lon = c(-88, -87), lat = c(35, 35)) my_locs <- sf::st_as_sf(my_locs, coords = c(\"lon\", \"lat\")) inject_modis(   locs = my_locs,   injection = list(path = files, subdataset = \"Cloud_Fraction_Day\",      name_covariates = \"MOD_CLCVD_0_\",      preprocess = amadeus::process_modis_swath, radius = c(1000))) } # }"},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Injects arguments to parallelize MODIS/VIIRS data processing ‚Äî inject_modis_par","title":"Injects arguments to parallelize MODIS/VIIRS data processing ‚Äî inject_modis_par","text":"Injects arguments parallelize MODIS/VIIRS data processing","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Injects arguments to parallelize MODIS/VIIRS data processing ‚Äî inject_modis_par","text":"","code":"inject_modis_par(locs, injection)"},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Injects arguments to parallelize MODIS/VIIRS data processing ‚Äî inject_modis_par","text":"locs data frame containing locations MODIS features need calculated. injection List dditional parameters passed calculate_modis function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Injects arguments to parallelize MODIS/VIIRS data processing ‚Äî inject_modis_par","text":"MODIS/VIIRS feature data.frame.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Injects arguments to parallelize MODIS/VIIRS data processing ‚Äî inject_modis_par","text":"Soon deprecated per dropping future dependency.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/inject_modis_par.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Injects arguments to parallelize MODIS/VIIRS data processing ‚Äî inject_modis_par","text":"","code":"if (FALSE) { # \\dontrun{ files <-   c(     \"/downloads/modis/mod06/MOD06_L2.A2022001.0000.061.2022001160000.hdf\",    \"/downloads/modis/mod06/MOD06_L2.A2022001.0005.061.2022001160000.hdf\"   ) my_locs <- data.frame(site_id = 1:2, lon = c(-88, -87), lat = c(35, 35)) my_locs <- sf::st_as_sf(my_locs, coords = c(\"lon\", \"lat\")) inject_modis_par(   locs = my_locs,   injection = list(path = files, subdataset = \"Cloud_Fraction_Day\",      name_covariates = \"MOD_CLCVD_0_\",      preprocess = amadeus::process_modis_swath, radius = c(1000))) } # }"},{"path":"https://niehs.github.io/beethoven/reference/inject_nlcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject arguments into NLCD calculation function for branching ‚Äî inject_nlcd","title":"Inject arguments into NLCD calculation function for branching ‚Äî inject_nlcd","text":"Inject arguments NLCD calculation function branching","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_nlcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject arguments into NLCD calculation function for branching ‚Äî inject_nlcd","text":"","code":"inject_nlcd(year = 2019, radius = 1000, ...)"},{"path":"https://niehs.github.io/beethoven/reference/inject_nlcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject arguments into NLCD calculation function for branching ‚Äî inject_nlcd","text":"year integer specifying year calculate NLCD data . radius integer specifying radius NLCD calculation. ... Additional arguments passed NLCD calculation function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/inject_nlcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject arguments into NLCD calculation function for branching ‚Äî inject_nlcd","text":"data.frame object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/interactive.html","id":null,"dir":"Reference","previous_headings":"","what":"Open interactive session with container.sif container. ‚Äî interactive","title":"Open interactive session with container.sif container. ‚Äî interactive","text":"Open interactive session container.sif container.","code":""},{"path":"https://niehs.github.io/beethoven/reference/interactive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open interactive session with container.sif container. ‚Äî interactive","text":"","code":"interactive(dir = \"./\")"},{"path":"https://niehs.github.io/beethoven/reference/interactive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open interactive session with container.sif container. ‚Äî interactive","text":"dir character(1). Directory interactive.sh file.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Load MODIS files from a specified path. ‚Äî load_modis_files","title":"Load MODIS files from a specified path. ‚Äî load_modis_files","text":"function takes path optional pattern input returns list MODIS files found specified path.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load MODIS files from a specified path. ‚Äî load_modis_files","text":"","code":"load_modis_files(path, pattern = \"hdf$\", date = character(2))"},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load MODIS files from a specified path. ‚Äî load_modis_files","text":"path path MODIS files located. pattern optional regular expression pattern filter files. default pattern \"hdf$\". date vector two dates filter files . default empty character vector.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load MODIS files from a specified path. ‚Äî load_modis_files","text":"list full file names MODIS files found specified path.","code":""},{"path":"https://niehs.github.io/beethoven/reference/load_modis_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load MODIS files from a specified path. ‚Äî load_modis_files","text":"","code":"if (FALSE) { # \\dontrun{ # Load MODIS files from the current directory modis_files <-   load_modis_files(     \".\",     date = c(\"2018-01-01\", \"2018-01-31\")   )  # Load MODIS files from a specific directory with a custom pattern modis_files <-   load_modis_files(     \"/path/to/files\",     pattern = \"MOD.*hdf$\",     date = c(\"2018-01-01\", \"2018-01-31\")   ) } # }"},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":null,"dir":"Reference","previous_headings":"","what":"Load arguments from the formatted argument list file ‚Äî loadargs","title":"Load arguments from the formatted argument list file ‚Äî loadargs","text":"function loads list object arguments injected calculation functions defined target. arguments numeric character, function names. case, internal function unmarshal_function called convert function name actual function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load arguments from the formatted argument list file ‚Äî loadargs","text":"","code":"loadargs(argfile, dataset)"},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load arguments from the formatted argument list file ‚Äî loadargs","text":"argfile character(1). Path argument file. RDS format. dataset character(1). Dataset name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/loadargs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load arguments from the formatted argument list file ‚Äî loadargs","text":"list arguments stored dataset slot argument file.","code":""},{"path":"https://niehs.github.io/beethoven/reference/make_subdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sampled subdataframes for base learners ‚Äî make_subdata","title":"Make sampled subdataframes for base learners ‚Äî make_subdata","text":"Per beethoven resampling strategy, function selects predefined number rows input data table saves row index .rowindex field.","code":""},{"path":"https://niehs.github.io/beethoven/reference/make_subdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sampled subdataframes for base learners ‚Äî make_subdata","text":"","code":"make_subdata(data, n = NULL, p = 0.3, ngroup_init = NULL)"},{"path":"https://niehs.github.io/beethoven/reference/make_subdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sampled subdataframes for base learners ‚Äî make_subdata","text":"data object inherits data.frame. n number rows sampled. p proportion rows used. Default 0.3. ngroup_init integer(1). Initial number splits pairing groups. Default NULL. Ensures subsample divisible ngroup_init generate_cv_index_spt.","code":""},{"path":"https://niehs.github.io/beethoven/reference/make_subdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make sampled subdataframes for base learners ‚Äî make_subdata","text":"row index original data. name original data object stored attribute \"object_origin\".","code":""},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallelize NARR feature calculation ‚Äî par_narr","title":"Parallelize NARR feature calculation ‚Äî par_narr","text":"function parallelizes processing calculation NARR data multiple domains.","code":""},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelize NARR feature calculation ‚Äî par_narr","text":"","code":"par_narr(domain, path, date, locs)"},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelize NARR feature calculation ‚Äî par_narr","text":"domain character vector specifying domains process. path character vector specifying path NARR data. date character vector specifying date NARR data process. locs data frame specifying locations calculate NARR data .","code":""},{"path":"https://niehs.github.io/beethoven/reference/par_narr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallelize NARR feature calculation ‚Äî par_narr","text":"list results parallel processing.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic joining by the time and spatial identifiers ‚Äî post_calc_autojoin","title":"Automatic joining by the time and spatial identifiers ‚Äî post_calc_autojoin","text":"key assumption data frames time field spatial field data one date year. Whether input time unit year date determined coercion first row value time field character .Date(). function fail gets year-like string length 4.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic joining by the time and spatial identifiers ‚Äî post_calc_autojoin","text":"","code":"post_calc_autojoin(   df_fine,   df_coarse,   field_sp = \"site_id\",   field_t = \"time\",   year_start = 2018L,   year_end = 2022L )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic joining by the time and spatial identifiers ‚Äî post_calc_autojoin","text":"df_fine fine-grained data frame. df_coarse coarse-grained data frame. field_sp name spatial field data frames. field_t name time field data frames. year_start starting year time period. year_end ending year time period.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic joining by the time and spatial identifiers ‚Äî post_calc_autojoin","text":"merged data table.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_autojoin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic joining by the time and spatial identifiers ‚Äî post_calc_autojoin","text":"","code":"if (FALSE) { # \\dontrun{ df_fine0 <- data.frame(site_id = c(\"A\", \"B\", \"B\", \"C\"),                       time = as.Date(c(\"2022-01-01\", \"2022-01-02\", \"2021-12-31\", \"2021-01-03\")),                       value = c(1, 2, 3, 5)) df_coarse0 <- data.frame(site_id = c(\"A\", \"B\", \"C\"),                         time = c(\"2022\", \"2022\", \"2021\"),                         other_value = c(10, 20, 30)) jdf <- post_calc_autojoin(df_fine0, df_coarse0) print(jdf) } # }"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-calculation column renaming ‚Äî post_calc_cols","title":"Post-calculation column renaming ‚Äî post_calc_cols","text":"function renames columns input data based prefix original column names.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-calculation column renaming ‚Äî post_calc_cols","text":"","code":"post_calc_cols(data, prefix = NULL, skip = c(\"site_id\", \"time\"))"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-calculation column renaming ‚Äî post_calc_cols","text":"data data.frame(1) prefix character(1). prefix added column names. skip character. column names skipped renaming. Default c(\"site_id\", \"time\").","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-calculation column renaming ‚Äî post_calc_cols","text":"data.frame renamed columns.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert time column to character ‚Äî post_calc_convert_time","title":"Convert time column to character ‚Äî post_calc_convert_time","text":"Convert time column character","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert time column to character ‚Äî post_calc_convert_time","text":"","code":"post_calc_convert_time(df)"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert time column to character ‚Äî post_calc_convert_time","text":"df data.table","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_convert_time.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert time column to character ‚Äî post_calc_convert_time","text":"function takes preprocessed data.table column named \"time\".","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a data frame by year ‚Äî post_calc_df_year_expand","title":"Expand a data frame by year ‚Äî post_calc_df_year_expand","text":"function expands data frame year, creating multiple rows year based time period specified.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a data frame by year ‚Äî post_calc_df_year_expand","text":"","code":"post_calc_df_year_expand(   df,   locs_id = \"site_id\",   time_field = \"time\",   time_start = NULL,   time_end = NULL,   time_unit = \"year\",   time_available = NULL,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a data frame by year ‚Äî post_calc_df_year_expand","text":"df input data frame. data frame number rows per year, meaning assumes argument spatial-feature data.frame. locs_id column name location identifier data frame. time_field column name time field data frame. time_start start time period. time_end end time period. time_unit unit time expand data frame. record. time_available vector available time periods. ... Placeholders.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a data frame by year ‚Äî post_calc_df_year_expand","text":"expanded data frame multiple rows year.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Expand a data frame by year ‚Äî post_calc_df_year_expand","text":"Year expansion rule assign nearest past year available years; past year available years, first available year rolled back start time period.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/post_calc_df_year_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a data frame by year ‚Äî post_calc_df_year_expand","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(year = c(2010, 2010, 2011, 2012),                  value = c(1, 2, 3, 4)) df_expanded <-   post_calc_df_year_expand(df, locs_id = \"site_id\", time_field = \"year\",                            time_start = 2011, time_end = 2012,                            time_unit = \"year\") print(df_expanded) } # }"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove columns from a data frame based on regular expression patterns. ‚Äî post_calc_drop_cols","title":"Remove columns from a data frame based on regular expression patterns. ‚Äî post_calc_drop_cols","text":"Remove columns data frame based regular expression patterns.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove columns from a data frame based on regular expression patterns. ‚Äî post_calc_drop_cols","text":"","code":"post_calc_drop_cols(   df,   candidates = \"(^lon$|^lat$|geoid|year$|description|geometry)\",   strict = FALSE )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove columns from a data frame based on regular expression patterns. ‚Äî post_calc_drop_cols","text":"df input data frame. candidates character vector regular expression patterns match column names. Columns match patterns removed. default value \"^lon$|^lat$|geoid|year$|description\". strict logical(1). TRUE, c(\"site_id\", \"time\") kept.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove columns from a data frame based on regular expression patterns. ‚Äî post_calc_drop_cols","text":"modified data frame specified columns removed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_drop_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove columns from a data frame based on regular expression patterns. ‚Äî post_calc_drop_cols","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(lon = 1:5, lat = 6:10, geoid = 11:15, year = 2010:2014,                  description = letters[1:5], other = 16:20) post_calc_drop_cols(df) } # }"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":null,"dir":"Reference","previous_headings":"","what":"Join a data.frame with a year-only date column to that with a full date column ‚Äî post_calc_join_yeardate","title":"Join a data.frame with a year-only date column to that with a full date column ‚Äî post_calc_join_yeardate","text":"full date column converted year column new column, data.frame year-column joined.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join a data.frame with a year-only date column to that with a full date column ‚Äî post_calc_join_yeardate","text":"","code":"post_calc_join_yeardate(   df_year,   df_date,   field_year = \"time\",   field_date = \"time\",   spid = \"site_id\" )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join a data.frame with a year-only date column to that with a full date column ‚Äî post_calc_join_yeardate","text":"df_year data.frame year-date column df_date data.frame full date column field_year character(1). Year column df_year field_date character(1). Date column df_date spid character(1). Name unique location identifier field.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_join_yeardate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join a data.frame with a year-only date column to that with a full date column ‚Äî post_calc_join_yeardate","text":"data.frame","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge spatial and spatiotemporal covariate data ‚Äî post_calc_merge_all","title":"Merge spatial and spatiotemporal covariate data ‚Äî post_calc_merge_all","text":"Merge spatial spatiotemporal covariate data","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge spatial and spatiotemporal covariate data ‚Äî post_calc_merge_all","text":"","code":"post_calc_merge_all(   locs,   locs_id,   time_id,   target_years = seq(2018, 2022),   df_sp,   df_spt )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge spatial and spatiotemporal covariate data ‚Äî post_calc_merge_all","text":"locs Location. e.g., AQS sites. locs_id character(1). Location identifier. time_id character(1). Location identifier. target_years integer. Used dummify nominal year. df_sp data.frame. Spatial-covariates. df_spt data.frame. Spatiotemporal covariates.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge spatial and spatiotemporal covariate data ‚Äî post_calc_merge_all","text":"data.frame","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_all.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Merge spatial and spatiotemporal covariate data ‚Äî post_calc_merge_all","text":"version assumes time_id contains Date-like strings.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge input data.frame objects ‚Äî post_calc_merge_features","title":"Merge input data.frame objects ‚Äî post_calc_merge_features","text":"Merge input data.frame objects","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge input data.frame objects ‚Äî post_calc_merge_features","text":"","code":"post_calc_merge_features(by = c(\"site_id\"), time = FALSE, ...)"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge input data.frame objects ‚Äî post_calc_merge_features","text":"character. Joining keys. See merge details. time logical(1). Whether include time identifier. Set TRUE supersede value appending time identifier. ... data.frame objects merge","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_merge_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge input data.frame objects ‚Äî post_calc_merge_features","text":"data.table","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-calculation Principal Component Analysis ‚Äî post_calc_pca","title":"Post-calculation Principal Component Analysis ‚Äî post_calc_pca","text":"function performs PCA input data frame reduce number predictors.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-calculation Principal Component Analysis ‚Äî post_calc_pca","text":"","code":"post_calc_pca(   data,   locs_id = \"site_id\",   time_id = \"time\",   yvar = \"Arithmetic.Mean\",   coords = c(\"lon\", \"lat\"),   num_comp = 5,   threshold = NA,   pattern = \"FUGITIVE|STACK\",   groups = NULL,   prefix = \"PCA\",   kernel = FALSE )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-calculation Principal Component Analysis ‚Äî post_calc_pca","text":"data data.frame data.table locs_id column name spatial object represents location identifier. time_id column name data frame represents time identifier. yvar target variable. coords column names represent XY coordinates. Default c(\"lon\", \"lat\"). num_comp integer(1). number components retain new predictors.  threshold defined, num_comp overridden. threshold numeric(1). fraction total variance covered components. pattern character(1). regular expression pattern match columns included PCA. groups character. character vector groups perform PCA . character regular expression pattern match columns included PCA. Default NULL. prefix character(1). prefix added column names Principal Components. Default NULL. kernel logical(1). Whether use kernel PCA recipes::step_kpca(). Default FALSE.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-calculation Principal Component Analysis ‚Äî post_calc_pca","text":"data.table Principal Components sufficient satisfy threshold, merged *_id yvar columns original data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_pca.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Post-calculation Principal Component Analysis ‚Äî post_calc_pca","text":"threshold defined, num_comp overridden.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":null,"dir":"Reference","previous_headings":"","what":"Change time column name ‚Äî post_calc_unify_timecols","title":"Change time column name ‚Äî post_calc_unify_timecols","text":"Change time column name","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change time column name ‚Äî post_calc_unify_timecols","text":"","code":"post_calc_unify_timecols(df, candidates = c(\"year\"), replace = \"time\")"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change time column name ‚Äî post_calc_unify_timecols","text":"df data.frame candidates character. Candidate column names. replace character. New column name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_unify_timecols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change time column name ‚Äî post_calc_unify_timecols","text":"data.frame","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Map the available raw data years over the given period ‚Äî post_calc_year_expand","title":"Map the available raw data years over the given period ‚Äî post_calc_year_expand","text":"Many raw datasets periodically updated period longer year. function maps available years given period.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map the available raw data years over the given period ‚Äî post_calc_year_expand","text":"","code":"post_calc_year_expand(   time_start = NULL,   time_end = NULL,   time_unit = \"year\",   time_available = NULL )"},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map the available raw data years over the given period ‚Äî post_calc_year_expand","text":"time_start integer(1). Starting year. time_end integer(1). Ending year. time_unit character(1). Time unit. Default \"year\". time_available vector. Available years.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map the available raw data years over the given period ‚Äî post_calc_year_expand","text":"integer vector length (time_end - time_start + 1). element get nearest preceeding available year.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Map the available raw data years over the given period ‚Äî post_calc_year_expand","text":"minimum time_available filled front first available year minimum time_available greater time_start.","code":""},{"path":"https://niehs.github.io/beethoven/reference/post_calc_year_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map the available raw data years over the given period ‚Äî post_calc_year_expand","text":"","code":"if (FALSE) { # \\dontrun{ process_calc_year_expand(2018, 2022, \"year\", c(2017, 2020, 2021)) process_calc_year_expand(2018, 2022, \"year\", c(2020, 2021)) } # }"},{"path":"https://niehs.github.io/beethoven/reference/predict_meta_learner.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict meta learner ‚Äî predict_meta_learner","title":"Predict meta learner ‚Äî predict_meta_learner","text":"Predict meta learner","code":""},{"path":"https://niehs.github.io/beethoven/reference/predict_meta_learner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict meta learner ‚Äî predict_meta_learner","text":"","code":"predict_meta_learner(meta_fitted, new_data)"},{"path":"https://niehs.github.io/beethoven/reference/predict_meta_learner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict meta learner ‚Äî predict_meta_learner","text":"meta_fitted Fitted meta learner model. new_data data.frame. New data. Must predictands predictors training data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/predict_meta_learner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict meta learner ‚Äî predict_meta_learner","text":"Predicted values.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"Load county sf object ‚Äî process_counties","title":"Load county sf object ‚Äî process_counties","text":"Load county sf object","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load county sf object ‚Äî process_counties","text":"","code":"process_counties(   year = 2020,   exclude = c(\"02\", \"15\", \"60\", \"66\", \"68\", \"69\", \"72\", \"78\") )"},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load county sf object ‚Äî process_counties","text":"year integer(1). Year county shapefile. exclude character. State FIPS codes exclude. Default c(\"02\", \"15\", \"60\", \"66\", \"68\", \"69\", \"72\", \"78\").","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_counties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load county sf object ‚Äî process_counties","text":"sf object","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Process atmospheric composition data by chunks (v2) ‚Äî process_geos_bulk","title":"Process atmospheric composition data by chunks (v2) ‚Äî process_geos_bulk","text":"Returning single SpatRasterDataset object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process atmospheric composition data by chunks (v2) ‚Äî process_geos_bulk","text":"","code":"process_geos_bulk(path = NULL, date = c(\"2018-01-01\", \"2018-01-01\"), ...)"},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process atmospheric composition data by chunks (v2) ‚Äî process_geos_bulk","text":"path character(1). Directory downloaded netCDF (.nc4) files. netCDF file paths. date character(2). length 10. Format \"YYYY-MM-DD\". ... Arguments passed terra::rast.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process atmospheric composition data by chunks (v2) ‚Äî process_geos_bulk","text":"SpatRaster object;","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process atmospheric composition data by chunks (v2) ‚Äî process_geos_bulk","text":"Layer names returned SpatRaster object contain variable, pressure level, date Reference duration: 1 day summary, layers: 115 seconds Superseded calc_geos_strict.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_geos_bulk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Process atmospheric composition data by chunks (v2) ‚Äî process_geos_bulk","text":"Mitchell Manware, Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":null,"dir":"Reference","previous_headings":"","what":"Process NARR Data (v2) ‚Äî process_narr2","title":"Process NARR Data (v2) ‚Äî process_narr2","text":"function processes NARR2 data based specified parameters.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process NARR Data (v2) ‚Äî process_narr2","text":"","code":"process_narr2(   date = c(\"2023-09-01\", \"2023-09-01\"),   variable = NULL,   path = NULL,   ... )"},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process NARR Data (v2) ‚Äî process_narr2","text":"date character vector specifying start end dates format \"YYYY-MM-DD\". variable character vector specifying variable interest. path character vector specifying path data files. ... Additional parameters passed functions.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process NARR Data (v2) ‚Äî process_narr2","text":"SpatRaster object containing processed NARR2 data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process NARR Data (v2) ‚Äî process_narr2","text":"function performs following steps: Sets directory path. Checks null parameters. Identifies file paths based specified variable. Generates date sequence based specified start end dates. Filters file paths include dates interest. Sets search abbreviation target variable. Imports processes data file path. Subsets data include dates interest. Returns processed data SpatRaster object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/process_narr2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process NARR Data (v2) ‚Äî process_narr2","text":"","code":"# Process NARR2 data for the variable \"PRATE\" from # September 1, 2023 to September 1, 2023 if (FALSE) { # \\dontrun{ data <-   process_narr2(     date = c(\"2023-09-01\", \"2023-09-01\"),     variable = \"PRATE\",     path = \"/path/to/data\"   ) } # }"},{"path":"https://niehs.github.io/beethoven/reference/query_modis_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify MODIS files ‚Äî query_modis_files","title":"Identify MODIS files ‚Äî query_modis_files","text":"function identifies relevant MODIS file paths based path, list julian dates, index. Designed help set arguments inject_modis_par function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/query_modis_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify MODIS files ‚Äî query_modis_files","text":"","code":"query_modis_files(path, list, index)"},{"path":"https://niehs.github.io/beethoven/reference/query_modis_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify MODIS files ‚Äî query_modis_files","text":"path character vector specifying path MODIS data. list list julian dates. index integer specifying index julian date use.","code":""},{"path":"https://niehs.github.io/beethoven/reference/query_modis_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify MODIS files ‚Äî query_modis_files","text":"character vector MODIS file paths.","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read AQS data ‚Äî read_locs","title":"Read AQS data ‚Äî read_locs","text":"Read AQS data","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read AQS data ‚Äî read_locs","text":"","code":"read_locs(fun_aqs = amadeus::process_aqs, export = FALSE, ...)"},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read AQS data ‚Äî read_locs","text":"fun_aqs function import AQS data. Default amadeus::process_aqs export Export file qs. Default FALSE. ... Passed arguments fun_aqs","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_locs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read AQS data ‚Äî read_locs","text":"Depending fun_aqs specification.","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Read paths from a directory with a specific file extension ‚Äî read_paths","title":"Read paths from a directory with a specific file extension ‚Äî read_paths","text":"Read paths directory specific file extension","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read paths from a directory with a specific file extension ‚Äî read_paths","text":"","code":"read_paths(   path,   extension = \".hdf\",   target_dates = c(\"2020-01-01\", \"2020-01-15\"),   julian = FALSE )"},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read paths from a directory with a specific file extension ‚Äî read_paths","text":"path directory path read paths. extension file extension match. Defaults \".hdf\". target_dates character vector length 2 containing start end dates. julian logical(1). TRUE, dates Julian format.","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read paths from a directory with a specific file extension ‚Äî read_paths","text":"character vector containing full paths matching files.","code":""},{"path":"https://niehs.github.io/beethoven/reference/read_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read paths from a directory with a specific file extension ‚Äî read_paths","text":"","code":"if (FALSE) { # \\dontrun{ # Read paths from a directory with default extension read_paths(\"/path/to/directory\")  # Read paths from a directory with custom extension read_paths(\"/path/to/directory\", \".txt\") } # }"},{"path":"https://niehs.github.io/beethoven/reference/reduce_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine dynamically branched sublists based on common column names ‚Äî reduce_list","title":"Combine dynamically branched sublists based on common column names ‚Äî reduce_list","text":"function combines sublists dynamically branched targets object preprocessor reduce_merge function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine dynamically branched sublists based on common column names ‚Äî reduce_list","text":"","code":"reduce_list(df_list)"},{"path":"https://niehs.github.io/beethoven/reference/reduce_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine dynamically branched sublists based on common column names ‚Äî reduce_list","text":"df_list list(1). List data frames common column names. Typically output dynamically branched target.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine dynamically branched sublists based on common column names ‚Äî reduce_list","text":"list object, data frames combined common column names.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce and merge a list of data tables ‚Äî reduce_merge","title":"Reduce and merge a list of data tables ‚Äî reduce_merge","text":"function takes list data tables merges together using specified columns. uses merge.data.table function data.table package perform merge.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce and merge a list of data tables ‚Äî reduce_merge","text":"","code":"reduce_merge(list_in, by = c(\"site_id\", \"time\"), all.x = TRUE, all.y = FALSE)"},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce and merge a list of data tables ‚Äî reduce_merge","text":"list_in list data tables merged. columns merge data tables . NULL, function automatically detect common column names. .x logical(1). Keeping rows first input. .y logical(1). Keeping rows second input.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce and merge a list of data tables ‚Äî reduce_merge","text":"merged data table.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce and merge a list of data tables ‚Äî reduce_merge","text":"","code":"if (FALSE) { # \\dontrun{ # Create example data tables dt1 <- data.table(a = 1:3, b = 4:6) dt2 <- data.table(a = 2:4, c = 7:9) dt3 <- data.table(a = 3:5, d = 10:12)  # Merge the data tables reduce_merge(list(dt1, dt2, dt3), by = \"a\") } # }"},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge_iter.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce and merge a list of data tables ‚Äî reduce_merge_iter","title":"Reduce and merge a list of data tables ‚Äî reduce_merge_iter","text":"function iteratively runs reduce_merge list data.table objects merging large data.tables may fit memory reduce_merge directly.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge_iter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce and merge a list of data tables ‚Äî reduce_merge_iter","text":"","code":"reduce_merge_iter(   list_in,   by = c(\"site_id\", \"time\"),   all.x = TRUE,   all.y = FALSE )"},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge_iter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce and merge a list of data tables ‚Äî reduce_merge_iter","text":"list_in list data tables merged. columns merge data tables . NULL, function automatically detect common column names. .x logical(1). Keeping rows first input. .y logical(1). Keeping rows second input.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_merge_iter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce and merge a list of data tables ‚Äî reduce_merge_iter","text":"merged data table.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Principal Component Analysis ‚Äî reduce_pca","title":"Perform Principal Component Analysis ‚Äî reduce_pca","text":"Perform Principal Component Analysis","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Principal Component Analysis ‚Äî reduce_pca","text":"","code":"reduce_pca(data, num_comp = 5, threshold = NA, kernel = FALSE)"},{"path":"https://niehs.github.io/beethoven/reference/reduce_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Principal Component Analysis ‚Äî reduce_pca","text":"data data.frame data.table num_comp integer(1). number components retain new predictors. threshold defined, num_comp overridden. threshold numeric(1). fraction total variance covered components. kernel logical(1). Whether use kernel PCA recipes::step_kpca(). Default FALSE.","code":""},{"path":"https://niehs.github.io/beethoven/reference/reduce_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Principal Component Analysis ‚Äî reduce_pca","text":"data.table Principal Components sufficient satisfy threshold.`","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Set arguments for the calculation process ‚Äî set_args_calc","title":"Set arguments for the calculation process ‚Äî set_args_calc","text":"function sets arguments calculation process. takes several parameters including site ID, time ID, time period, extent, user email, export path, input path.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set arguments for the calculation process ‚Äî set_args_calc","text":"","code":"set_args_calc(   char_siteid = \"site_id\",   char_timeid = \"time\",   char_period = c(\"2018-01-01\", \"2022-10-31\"),   num_extent = c(-126, -62, 22, 52),   char_user_email = paste0(Sys.getenv(\"USER\"), \"@nih.gov\"),   export = FALSE,   path_export = \"inst/targets/calc_spec.qs\",   char_input_dir = \"input\",   nthreads_nasa = 14L,   nthreads_tri = 5L,   nthreads_geoscf = 10L,   nthreads_gmted = 4L,   nthreads_narr = 24L,   nthreads_groads = 3L,   nthreads_population = 3L,   nthreads_append = 8L,   nthreads_impute = 64L )"},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set arguments for the calculation process ‚Äî set_args_calc","text":"char_siteid Character string specifying site ID. Default \"site_id\". char_timeid Character string specifying time ID. Default \"time\". char_period Character vector specifying time period. Default c(\"2018-01-01\", \"2022-10-31\"). num_extent Numeric vector specifying extent. Default c(-126, -62, 22, 52). char_user_email Character string specifying user email. Default current user's email nih.gov domain. export logical(1). TRUE, list calculation process exported path_export. Default FALSE. path_export Character string specifying export path. Default \"inst/targets/calc_spec.qs\". char_input_dir Character string specifying input path. Default \"input\". nthreads_nasa integer(1). Number threads NASA data. Default 14L. nthreads_tri integer(1). Number threads TRI data. Default 5L. nthreads_geoscf integer(1). Number threads GEOSCF data. Default 10L. nthreads_gmted integer(1). Number threads GMTED data. Default 4L. nthreads_narr integer(1). Number threads NARR data. Default 24L. nthreads_groads integer(1). Number threads GROADS data. Default 3L. nthreads_population integer(1). Number threads population data. Default 3L. nthreads_append integer(1). Number threads appending data. Default 8L. nthreads_impute integer(1). Number threads imputing data. Default 64L.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set arguments for the calculation process ‚Äî set_args_calc","text":"list arguments common use calculation process. *.qs *.rds file defined path_export saved export TRUE. char_siteid: Character string specifying site ID. char_timeid: Character string specifying time ID. char_period: Character vector specifying time period. num_extent: Numeric vector specifying extent. char_user_email: Character string specifying user email. char_input_dir: Character string specifying input path. nthreads_nasa: Number threads NASA data. nthreads_tri: Number threads TRI data. nthreads_geoscf: Number threads GEOS-CF data. nthreads_gmted: Number threads GMTED data. nthreads_narr: Number threads NARR data. nthreads_groads: Number threads SEDAC Groads data. nthreads_population: Number threads population data. nthreads_append: Number threads appending data. nthreads_impute: Number threads imputing data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set arguments for the calculation process ‚Äî set_args_calc","text":"number threads used fixed 1L otherwise specified nthreads_* arguments. path_input contain following subdirectories: modis/raw/61/MOD11A1 modis/raw/61/MOD06_L2 modis/raw/61/MOD09GA modis/raw/61/MCD19A2 modis/raw/61/MOD13A2 modis/raw/5000/VNP46A2 aqs nlcd geos/aqc_tavg_1hr_g1440x721_v1 geos/chm_tavg_1hr_g1440x721_v1 HMS_Smoke/data gmted nei narr HMS_Smoke koppen_geiger ecoregions sedac_groads sedac_population","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_calc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set arguments for the calculation process ‚Äî set_args_calc","text":"Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate argument list for raw data download ‚Äî set_args_download","title":"Generate argument list for raw data download ‚Äî set_args_download","text":"Generate argument list raw data download","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_args_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate argument list for raw data download ‚Äî set_args_download","text":"","code":"set_args_download(   char_period = c(\"2018-01-01\", \"2022-10-31\"),   char_input_dir = \"input\",   nasa_earth_data_token = NULL,   mod06_filelist = NULL,   year_nlcd = c(2019, 2021),   export = FALSE,   path_export = \"inst/targets/download_spec.qs\" )"},{"path":"https://niehs.github.io/beethoven/reference/set_args_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate argument list for raw data download ‚Äî set_args_download","text":"char_period Character(2) vector specifying time period. Default c(\"2018-01-01\", \"2022-10-31\"). char_input_dir Character string specifying input path. Default \"input\". nasa_earth_data_token Character string specifying NASA Earth Data token. mod06_filelist character(1). File path CSV file MOD06 download URLs. year_nlcd numeric(2). Numeric vector specifying NLCD years. Default c(2019, 2021). export logical(1). TRUE, list saved path_export. Default TRUE. path_export Character string specifying export path. Default \"inst/targets/download_spec.qs\".","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Set resource management for SLURM ‚Äî set_slurm_resource","title":"Set resource management for SLURM ‚Äî set_slurm_resource","text":"function sets resources SLURM job submission. Note function designed work tar_make_future()","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set resource management for SLURM ‚Äî set_slurm_resource","text":"","code":"set_slurm_resource(   template_file = \"inst/targets/template_slurm.tmpl\",   partition = \"geo\",   ncpus = 2L,   ntasks = 2L,   memory = 8,   user_email = paste0(Sys.getenv(\"USER\"), \"@nih.gov\"),   error_log = \"slurm_error.log\" )"},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set resource management for SLURM ‚Äî set_slurm_resource","text":"template_file SLURM job submission shell template path. partition character(1). Name partition. Default \"geo\" ncpus integer(1). Number CPU cores assigned task. ntasks integer(1). Number tasks submit. memory integer(1). Specifically odds 2*x GB. user_email character(1). User email address. error_log character(1). Error log file name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set resource management for SLURM ‚Äî set_slurm_resource","text":"list resources tar_resources","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set resource management for SLURM ‚Äî set_slurm_resource","text":"function designed used tar_resources. Suggested number ncpus 1 typical multicore R tasks.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_slurm_resource.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set resource management for SLURM ‚Äî set_slurm_resource","text":"Insang Song","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_target_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Set which years to be processed ‚Äî set_target_years","title":"Set which years to be processed ‚Äî set_target_years","text":"Set years processed","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_target_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set which years to be processed ‚Äî set_target_years","text":"","code":"set_target_years(period = NULL, available = NULL)"},{"path":"https://niehs.github.io/beethoven/reference/set_target_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set which years to be processed ‚Äî set_target_years","text":"period character(2)/integer(2) integer/character/Date. available vector integer Date. Available years processed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_target_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set which years to be processed ‚Äî set_target_years","text":"vector years processed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/set_target_years.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set which years to be processed ‚Äî set_target_years","text":"function designed define temporal domain calculation period available years raw data.","code":""},{"path":"https://niehs.github.io/beethoven/reference/split_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a date range into subranges ‚Äî split_dates","title":"Split a date range into subranges ‚Äî split_dates","text":"Split date range subranges equal length list.","code":""},{"path":"https://niehs.github.io/beethoven/reference/split_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a date range into subranges ‚Äî split_dates","text":"","code":"split_dates(dates, n, year = TRUE, julian = FALSE)"},{"path":"https://niehs.github.io/beethoven/reference/split_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a date range into subranges ‚Äî split_dates","text":"dates character(2). date query. \"YYYY-MM-DD\" format. n integer(1). Number dates subrange. year logical(1). TRUE, sublists contain one year. may result sublists fewer n dates. julian logical(1). TRUE, dates Julian format.","code":""},{"path":"https://niehs.github.io/beethoven/reference/split_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a date range into subranges ‚Äî split_dates","text":"list object, date ranges split subranges.","code":""},{"path":"https://niehs.github.io/beethoven/reference/switch_generate_cv_rset.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose cross-validation strategy for the base learner ‚Äî switch_generate_cv_rset","title":"Choose cross-validation strategy for the base learner ‚Äî switch_generate_cv_rset","text":"Choose cross-validation strategy base learner","code":""},{"path":"https://niehs.github.io/beethoven/reference/switch_generate_cv_rset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose cross-validation strategy for the base learner ‚Äî switch_generate_cv_rset","text":"","code":"switch_generate_cv_rset(   learner = c(\"spatial\", \"temporal\", \"spatiotemporal\"),   ... )"},{"path":"https://niehs.github.io/beethoven/reference/switch_generate_cv_rset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose cross-validation strategy for the base learner ‚Äî switch_generate_cv_rset","text":"learner character(1). Learner type. one : \"spatial\": spatial cross-validation. \"temporal\": temporal cross-validation. \"spatiotemporal\": spatiotemporal cross-validation. ... Additional arguments passed.","code":""},{"path":"https://niehs.github.io/beethoven/reference/switch_generate_cv_rset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose cross-validation strategy for the base learner ‚Äî switch_generate_cv_rset","text":"rsample::manual_rset() output object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/switch_generate_cv_rset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Choose cross-validation strategy for the base learner ‚Äî switch_generate_cv_rset","text":"function's returned value used input fit_base_brulee, fit_base_lightgbm, fit_base_elnet. Learner values can used branching point cross-validation strategy.","code":""},{"path":"https://niehs.github.io/beethoven/reference/switch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a base learner model based on parsnip and tune ‚Äî switch_model","title":"Define a base learner model based on parsnip and tune ‚Äî switch_model","text":"Define base learner model based parsnip tune","code":""},{"path":"https://niehs.github.io/beethoven/reference/switch_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a base learner model based on parsnip and tune ‚Äî switch_model","text":"","code":"switch_model(   model_type = c(\"mlp\", \"mlp2\", \"xgb\", \"lgb\", \"elnet\", \"brulee_linear\"),   device = c(\"cpu\", \"cuda\", \"gpu\") )"},{"path":"https://niehs.github.io/beethoven/reference/switch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a base learner model based on parsnip and tune ‚Äî switch_model","text":"model_type character(1). Model type used. Default \"mlp\". Available options \"mlp\", \"xgb\", \"lgb\", \"elnet\". device character(1). device used training. GPU acceleration possible brulee-engine multi-layer perceptron (model_type = \"mlp\";device = \"cuda\") lightgbm-engine boosted tree (model_type = \"lgb\"; device = \"gpu\"). Ensure system equipped CUDA-enabled graphical processing units utilizing cuda gpu.","code":""},{"path":"https://niehs.github.io/beethoven/reference/switch_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a base learner model based on parsnip and tune ‚Äî switch_model","text":"parsnip model object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/sys_beethoven.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Library Paths and Environment Variables for Beethoven Workflow ‚Äî sys_beethoven","title":"Configure Library Paths and Environment Variables for Beethoven Workflow ‚Äî sys_beethoven","text":"function sets library paths environmental variables required running Beethoven workflow containerized environment.","code":""},{"path":"https://niehs.github.io/beethoven/reference/sys_beethoven.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Library Paths and Environment Variables for Beethoven Workflow ‚Äî sys_beethoven","text":"","code":"sys_beethoven(   libpaths = .libPaths(grep(paste0(\"biotools|\", Sys.getenv(\"USER\")), .libPaths(), value =     TRUE, invert = TRUE)),   path = paste0(\"/usr/local/cuda/bin:\", \"/usr/local/nvidia/bin:\", \"/usr/local/cuda/bin:\",     \"/usr/local/sbin:\", \"/usr/local/bin:\", \"/usr/sbin:\", \"/usr/bin:\", \"/sbin:\", \"/bin\"),   ld_library_path = \"/usr/local/cuda/lib64\",   cuda_home = \"/usr/local/cuda\" )"},{"path":"https://niehs.github.io/beethoven/reference/sys_beethoven.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Library Paths and Environment Variables for Beethoven Workflow ‚Äî sys_beethoven","text":"libpaths character vector specifying library paths use. default, excludes user-specific host paths .libPaths(). path character string specifying system PATH environment variable. Defaults container-friendly configuration CUDA paths. ld_library_path character string specifying LD_LIBRARY_PATH environment variable. Defaults \"/usr/local/cuda/lib64\". cuda_home character string specifying CUDA_HOME environment variable. Defaults \"/usr/local/cuda\".","code":""},{"path":"https://niehs.github.io/beethoven/reference/test.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all tests within a single file from tests/testthat/ directory with the container_models.sif container. ‚Äî test","title":"Run all tests within a single file from tests/testthat/ directory with the container_models.sif container. ‚Äî test","text":"Run tests within single file tests/testthat/ directory container_models.sif container.","code":""},{"path":"https://niehs.github.io/beethoven/reference/test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all tests within a single file from tests/testthat/ directory with the container_models.sif container. ‚Äî test","text":"","code":"test(pattern = NULL)"},{"path":"https://niehs.github.io/beethoven/reference/test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all tests within a single file from tests/testthat/ directory with the container_models.sif container. ‚Äî test","text":"pattern regular expression match test file name.","code":""},{"path":"https://niehs.github.io/beethoven/reference/test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all tests within a single file from tests/testthat/ directory with the container_models.sif container. ‚Äî test","text":"NULL; Prints output testthat tests.","code":""},{"path":[]},{"path":"https://niehs.github.io/beethoven/reference/unmarshal_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmarshal functions ‚Äî unmarshal_function","title":"Unmarshal functions ‚Äî unmarshal_function","text":"function developed avoid random errors compressing decompressing R function objects qs::qsave qs::qread. encounter errors, please use function function name strings save load function objects.","code":""},{"path":"https://niehs.github.io/beethoven/reference/unmarshal_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmarshal functions ‚Äî unmarshal_function","text":"","code":"unmarshal_function(pkg_func_str)"},{"path":"https://niehs.github.io/beethoven/reference/unmarshal_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmarshal functions ‚Äî unmarshal_function","text":"pkg_func_str Character string specifying package function.","code":""},{"path":"https://niehs.github.io/beethoven/reference/unmarshal_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unmarshal functions ‚Äî unmarshal_function","text":"Function object.","code":""},{"path":"https://niehs.github.io/beethoven/reference/unmarshal_function.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Unmarshal functions ‚Äî unmarshal_function","text":"function name string must include two colons ::. Also, package preceding two colons loaded current environment.","code":""},{"path":"https://niehs.github.io/beethoven/reference/unmarshal_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unmarshal functions ‚Äî unmarshal_function","text":"","code":"unmarshal_function(\"amadeus::process_aqs\") #> function (path = NULL, date = c(\"2018-01-01\", \"2022-12-31\"),  #>     mode = c(\"date-location\", \"available-data\", \"location\"),  #>     data_field = \"Arithmetic.Mean\", return_format = c(\"terra\",  #>         \"sf\", \"data.table\"), extent = NULL, ...)  #> { #>     mode <- match.arg(mode) #>     return_format <- match.arg(return_format) #>     if (!is.null(date)) { #>         date <- try(as.Date(date)) #>         if (inherits(date, \"try-error\")) { #>             stop(\"date has invalid format(s). Please check the values.\") #>         } #>         if (length(date) != 2) { #>             if (length(date) == 1) { #>                 date <- c(date, date) #>             } #>             else { #>                 stop(\"date should be a character vector of length 1 or 2.\") #>             } #>         } #>     } #>     else { #>         stop(\"date should be defined.\") #>     } #>     if (length(path) == 1 && dir.exists(path)) { #>         path <- list.files(path = path, pattern = \"*.csv$\", full.names = TRUE) #>     } #>     if (length(path) == 0) { #>         stop(\"path does not contain csv files.\") #>     } #>     pathfiles <- lapply(path, read.csv) #>     sites <- data.table::rbindlist(pathfiles, fill = TRUE) #>     sites$site_id <- sprintf(\"%02d%03d%04d%05d\", as.integer(sites$State.Code),  #>         as.integer(sites$County.Code), as.integer(sites$Site.Num),  #>         as.integer(sites$Parameter.Code)) #>     site_id <- NULL #>     Datum <- NULL #>     POC <- NULL #>     Date.Local <- NULL #>     Sample.Duration <- NULL #>     date_start <- as.Date(date[1]) #>     date_end <- as.Date(date[2]) #>     date_sequence <- seq(date_start, date_end, \"day\") #>     date_sequence <- as.character(date_sequence) #>     sites <- dplyr::ungroup(dplyr::mutate(dplyr::filter(dplyr::group_by(dplyr::filter(dplyr::filter(dplyr::as_tibble(sites),  #>         as.character(Date.Local) %in% date_sequence), startsWith(Sample.Duration,  #>         \"24\")), site_id), POC == min(POC)), time = Date.Local)) #>     col_sel <- c(\"site_id\", \"Longitude\", \"Latitude\", \"Datum\") #>     if (mode != \"available-data\") { #>         sites_v <- unique(sites[, col_sel]) #>     } #>     else { #>         col_sel <- append(col_sel, \"Event.Type\") #>         col_sel <- append(col_sel, \"time\") #>         col_sel <- append(col_sel, data_field) #>         sites_v <- dplyr::distinct(dplyr::select(sites, dplyr::all_of(col_sel))) #>         sites_vdup <- dplyr::ungroup(dplyr::filter(dplyr::filter(dplyr::group_by(sites_v,  #>             site_id, time), dplyr::n() > 1), !!dplyr::sym(\"Event.Type\") ==  #>             \"Excluded\")) #>         sites_v <- dplyr::anti_join(sites_v, sites_vdup, by = c(\"site_id\",  #>             \"time\", \"Event.Type\")) #>     } #>     names(sites_v)[2:3] <- c(\"lon\", \"lat\") #>     sites_v <- data.table::as.data.table(sites_v) #>     sites_v <- sites_v[!grepl(\"^(02|15|72|78|6|80)\", site_id),  #>         ] #>     sites_v_nad <- sites_v[sites_v$Datum == \"NAD83\", ] #>     sites_v_nad <- terra::vect(sites_v_nad, keepgeom = TRUE,  #>         crs = \"EPSG:4269\") #>     sites_v_nad <- terra::project(sites_v_nad, \"EPSG:4326\") #>     sites_v_nad <- as.data.frame(sites_v_nad) #>     sites_v_wgs <- sites_v[sites_v$Datum == \"WGS84\"] #>     final_sites <- data.table::rbindlist(list(sites_v_wgs, sites_v_nad),  #>         fill = TRUE) #>     final_sites <- final_sites[, grep(\"Datum\", names(final_sites),  #>         invert = TRUE), with = FALSE] #>     if (mode == \"date-location\") { #>         final_sites <- lapply(split(date_sequence, date_sequence),  #>             function(x) { #>                 fs_time <- final_sites #>                 fs_time$time <- x #>                 return(fs_time) #>             }) #>         final_sites <- data.table::rbindlist(final_sites, fill = TRUE) #>     } #>     if (mode == \"available-data\") { #>         final_sites <- unique(final_sites) #>     } #>     final_sites <- switch(return_format, terra = terra::vect(final_sites,  #>         keepgeom = TRUE, crs = \"EPSG:4326\"), sf = sf::st_as_sf(final_sites,  #>         remove = FALSE, dim = \"XY\", coords = c(\"lon\", \"lat\"),  #>         crs = \"EPSG:4326\"), data.table = final_sites) #>     if (!is.null(extent)) { #>         if (return_format == \"data.table\") { #>             warning(\"Extent is not applicable for data.table. Returning data.table...\\n\") #>             return(final_sites) #>         } #>         final_sites <- apply_extent(final_sites, extent) #>     } #>     return(final_sites) #> } #> <bytecode: 0x55c5197c1408> #> <environment: namespace:amadeus>"},{"path":"https://niehs.github.io/beethoven/reference/vis_spt_rset.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the spatio-temporal cross-validation index ‚Äî vis_spt_rset","title":"Visualize the spatio-temporal cross-validation index ‚Äî vis_spt_rset","text":"Visualize spatio-temporal cross-validation index","code":""},{"path":"https://niehs.github.io/beethoven/reference/vis_spt_rset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the spatio-temporal cross-validation index ‚Äî vis_spt_rset","text":"","code":"vis_spt_rset(rsplit, cex = 0.02, angle = 60)"},{"path":"https://niehs.github.io/beethoven/reference/vis_spt_rset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the spatio-temporal cross-validation index ‚Äî vis_spt_rset","text":"rsplit rsample::manual_rset() object. cex numeric(1). Size points plot. angle numeric(1). Viewing angle 3D plot.","code":""},{"path":"https://niehs.github.io/beethoven/reference/vis_spt_rset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the spatio-temporal cross-validation index ‚Äî vis_spt_rset","text":"None. plot generated.","code":""}]
