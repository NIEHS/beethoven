name: R Package CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: 4.1  # You can change this to the R version you need

    - name: Cache C++ and R dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/R
          ~/.local/share/R
        key: dependencies-${{ runner.os }}-${{ hashFiles('**/DESCRIPTION') }}
        restore-keys: |
          dependencies-${{ runner.os }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libudunits2-dev libgdal-dev

        
    - name: Install dependencies
      run: |
        R -e 'install.packages("remotes")'
        R -e 'remotes::install_deps()'

    - name: Install dependencies for covr and testthat
      run: R -e 'install.packages(c("covr", "testthat"), dependencies = TRUE)'

    - name: Run tests and calculate coverage
      run: |
        echo "Current working directory: $(pwd)"
        R -e 'library(covr); covr::package_coverage()'

    - name: Print Working Directory
      run: |
        echo "Current working directory: $(pwd)"

    - name: Search for Coverage Report
      run: |
        # Array of possible coverage report filenames/extensions
        declare -a coverage_files=("coverage.xml" "coverage.covr.xml" "other_coverage.xml")

        # Iterate over possible filenames/extensions
        for file in "${coverage_files[@]}"; do
          # Search for the coverage report
          found_file=$(find "${{ github.workspace }}" -name "$file" -print -quit)

          # If the file is found, print its location and break the loop
          if [ -n "$found_file" ]; then
            echo "Coverage report found: $found_file"
            break
          fi
        done

        # If the file is not found, exit with an error
        if [ -z "$found_file" ]; then
          echo "Coverage report not found."
          exit 1
        fi

    - name: Check if coverage report exists
      run: |
        if [ -f "${{ github.workspace }}/coverage.xml" ]; then
          echo "Coverage report found."
        else
          echo "Coverage report not found."
          exit 1  # Exit with an error if the report is missing
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        coverage_reports: ${{ github.workspace }}/coverage.xml
        
    - name: Cleanup
      run: |
        R -e 'remove.packages("remotes")'
