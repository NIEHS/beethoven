BootStrap: docker
From: nvidia/cuda:11.8.0-devel-ubuntu22.04

%post
    # Set noninteractive mode.
    export DEBIAN_FRONTEND=noninteractive

    # Update package list
    apt-get update

    # Install locales and generate the necessary locale
    apt-get install -y locales
    locale-gen en_US.UTF-8
    
    # Update system and install necessary dependencies
    apt-get update && apt-get install -y \
        software-properties-common \
        bash \
        coreutils \
        curl \
        gnupg \
        ca-certificates \
        cmake \
        libcurl4-openssl-dev \
        libxml2-dev \
        libssl-dev \
        libgdal-dev \
        libproj-dev \
        libgeos-dev \
        libv8-dev \
        libsodium-dev \
        libgit2-dev \
        libprotobuf-dev \
        protobuf-compiler \
        pkg-config \
        unzip \
        wget \
        git \
        libicu-dev \
        libblas-dev \
        liblapack-dev \
        gfortran \
        libreadline-dev \
        tzdata \
        libx11-dev \
        libxt-dev \
        libxmu-dev \
        libbz2-dev \
        libnng-dev \
        libfontconfig1-dev \
        libfreetype6-dev \
        libharfbuzz-dev \
        libfribidi-dev \
        slurm-client \
        lmod \
        && rm -rf /var/lib/apt/lists/*

    # Manually download and build R 4.4.2
    wget https://cran.r-project.org/src/base/R-4/R-4.4.2.tar.gz
    tar -xvzf R-4.4.2.tar.gz
    cd R-4.4.2
    ./configure --enable-R-shlib --with-blas --with-lapack
    make -j$(nproc)
    make install
    cd ..
    rm -rf R-4.4.2 R-4.4.2.tar.gz

    # Configure R default repository
    echo "options(repos = c(CRAN = 'https://cloud.r-project.org'))" >> /usr/local/lib/R/etc/Rprofile.site

    # Set locale for the environment
    echo "LANG=en_US.UTF-8" >> /etc/default/locale
    echo "LC_ALL=en_US.UTF-8" >> /etc/default/locale
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8

    # Create directories
    mkdir /pipeline
    mkdir /input
    mkdir /opt/_targets

    # Install R packages (mimicking rocker/ml-verse setup)
    Rscript -e "install.packages(c('pak', 'targets', 'tarchetypes', \
        'testthat', 'tidymodels', 'bonsai', 'qs2', 'mirai', \
        'torch', 'nanonext', 'tidyverse', 'xgboost', 'glmnet', \
        'lightgbm'))"
    Rscript -e "options(timeout = 1800); torch::install_torch(version = 'latest', type = 'gpu')"
    Rscript -e "pak::pak('tidymodels/brulee@gpu')"
    Rscript -e "pak::pak('wlandau/crew'); pak::pak('wlandau/crew.cluster')"
    Rscript -e "pak::pak('NIEHS/beethoven@dev-mm-0108')"

%environment
    # Set locale and CUDA environment variables
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export TERM=xterm-256color
    export CUDA_VISIBLE_DEVICES=0,1,2,3
    export PATH="/usr/local/cuda/bin:$PATH"
    export CUDA_HOME="/usr/local/cuda"
    export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"

%runscript
    # Define the default run behavior of the container
    echo "This container is ready for R-based machine learning tasks with CUDA 11.8.0."

%labels
    Basic machine learning with targets and crew, unicode text and SLURM; built \
    from NVIDIA CUDA 11.8.0 devel for Ubuntu 22.04.
